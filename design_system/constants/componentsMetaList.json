{
  "AlgoliaInput": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "AlgoliaInput",
    "shortDescription": "Search and select fields stored in Algolia.",
    "status": "Stable",
    "componentPath": "AlgoliaInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/AlgoliaInput.jsx",
    "props": [
      {
        "name": "value",
        "required": true,
        "description": "This is for AlgoliaInput. The object that is currently selected. To dedupe, ensure that the valueFn of this value produces the unique key desired.",
        "type": {
          "name": "union",
          "raw": "T | null",
          "elements": [{"name": "T"}, {"name": "null"}]
        }
      },
      {
        "name": "placeholder",
        "required": false,
        "description": "Placeholder displayed in the blank selector.",
        "type": {"name": "string"},
        "defaultValue": "\"\""
      },
      {
        "name": "optionRenderer",
        "required": false,
        "description": "Given an option T, produces the react node to render. Strings are react nodes, FYI. If not provided, valueRenderer is used (this is sufficient in most cases)",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "T => React.Node",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "T"}}],
            "return": {"name": "ReactNode", "raw": "React.Node"}
          }
        }
      },
      {
        "name": "valueRenderer",
        "required": true,
        "description": "Given an option T or null, produces the react node to render. Strings are react nodes, FYI.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(?T) => React.Node",
          "signature": {
            "arguments": [
              {"name": "", "type": {"name": "T", "nullable": true}}
            ],
            "return": {"name": "ReactNode", "raw": "React.Node"}
          }
        }
      },
      {
        "name": "searchIndices",
        "required": true,
        "description": "The algolia search indices you'd like to search on.",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "string"}],
          "raw": "$ReadOnlyArray<string>"
        }
      },
      {
        "name": "searchOptions",
        "required": false,
        "description": "Check out AlgoliaSearchOptions to see a list of possible search paramaters.",
        "type": {"name": "AlgoliaSearchOptions"},
        "defaultValue": "{}"
      },
      {
        "name": "onChange",
        "required": true,
        "description": "The function invoked when the user updates their selection.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(T | null) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "T | null",
                  "elements": [{"name": "T"}, {"name": "null"}]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "isLarge",
        "required": false,
        "description": "Makes the AlgoliaInput the large input size.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "parseIdAttributes",
        "required": false,
        "description": "By default, objectID and id fields are converted to numbers if present. This boolean will leave the record unchanged if set to false.",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "disabled",
        "required": false,
        "description": "Disables the input component and makes it unclickable.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "Whether the input is invalid.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "algoliaSearchResult",
        "required": true,
        "description": "This is provided by the connectToAlgolia higher order component. value: is the unique key of the record, and option is the full record. These are required by the connectToAlgolia HOC.",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  +label?: string,\n  +value: string,\n  +option: T,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {"name": "string", "required": false}
                  },
                  {
                    "key": "value",
                    "value": {"name": "string", "required": true}
                  },
                  {"key": "option", "value": {"name": "T", "required": true}}
                ]
              }
            }
          ],
          "raw": "$ReadOnlyArray<{\n  +label?: string,\n  +value: string,\n  +option: T,\n}>"
        }
      },
      {
        "name": "valueFn",
        "required": false,
        "description": "This is function computes the unqiue key from an the Algolia record. Though it can produce a string or number, in the implementation all keys are converted to strings to avoid record mismatches.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "T => AlgoliaInputKey",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "T"}}],
            "return": {"name": "AlgoliaInputKey"}
          }
        },
        "defaultValue": "basicValueFn"
      },
      {
        "name": "performSearch",
        "required": true,
        "description": "This is provided by the connectToAlgolia higher order component. This method performs the algolia search, and will push the result down via algoliaSearchResult.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  query: string,\n  options: AlgoliaSearchOptions,\n  shouldNotConvertIdFields: boolean\n) => void",
          "signature": {
            "arguments": [
              {"name": "query", "type": {"name": "string"}},
              {"name": "options", "type": {"name": "AlgoliaSearchOptions"}},
              {"name": "shouldNotConvertIdFields", "type": {"name": "boolean"}}
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "clearSearch",
        "required": true,
        "description": "This is provided by the connectToAlgolia higher order component. This method clears the last algolia search results.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "autoFocus",
        "required": false,
        "description": "focus the control when it mounts",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isNullable",
        "required": false,
        "description": "determines if the user can X out a selected value",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      }
    ]
  },
  "Badge": {
    "brandStatus": "V3",
    "category": "General",
    "description": "The badge component informs the user that a certain element on the page has new information for the user. A count can be provided to indicate exactly how many new items there are. If a child is provided, the badge will render to the top right of the child.",
    "name": "Badge",
    "shortDescription": "The badge is a component displaying the number of items await your attention.",
    "status": "Beta",
    "componentPath": "Badge",
    "repoFilePath": "webpack/assets/javascripts/latitude/Badge.jsx",
    "props": [
      {
        "name": "count",
        "required": false,
        "description": "Count determines when the badge is rendered and how. If either false, 0 or undefined the badge is not rendered. If true, the badge is rendered as a dot. If a number greater than 0, the badge is rendered with the number inside",
        "type": {
          "name": "union",
          "raw": "number | boolean",
          "elements": [{"name": "number"}, {"name": "boolean"}]
        }
      },
      {
        "name": "max",
        "required": false,
        "description": "The maximum value to be displayed. Any value larger will be shown as this number followed by a plus sign",
        "type": {"name": "number"},
        "defaultValue": "99"
      },
      {
        "name": "intent",
        "required": false,
        "description": "The intent of the badge determines the background color",
        "type": {
          "name": "union",
          "raw": "\"ready\" | \"ready-green\" | \"pending\" | \"error\" | \"complete\"",
          "elements": [
            {"name": "literal", "value": "\"ready\""},
            {"name": "literal", "value": "\"ready-green\""},
            {"name": "literal", "value": "\"pending\""},
            {"name": "literal", "value": "\"error\""},
            {"name": "literal", "value": "\"complete\""}
          ]
        },
        "defaultValue": "\"ready\""
      },
      {
        "name": "children",
        "required": false,
        "description": "Component wrapped by the badge. If there is one, the badge is rendered on the top right corner",
        "type": {"name": "ReactNode", "raw": "React.Node"},
        "defaultValue": "null"
      }
    ]
  },
  "Banner": {
    "brandStatus": "V2",
    "category": "Data Display",
    "description": "The banner component is used to provide feedback to the user such as when an app update has occured or when there are errors returned from the server. Banners can also be used to display passive messages such as when times are being displayed in a separate timezone or when the user is impersonating a client.",
    "name": "Banner",
    "shortDescription": "Spans the entire width of its parent and displays a informing message",
    "status": "Beta",
    "componentPath": "Banner",
    "repoFilePath": "webpack/assets/javascripts/latitude/Banner.jsx",
    "props": [
      {
        "name": "intent",
        "required": false,
        "description": "defines the visual style which conveys the level of importance / urgency\nto the user",
        "type": {
          "name": "union",
          "raw": "\"default\" | \"default-light\" | \"warning\" | \"danger\"",
          "elements": [
            {"name": "literal", "value": "\"default\""},
            {"name": "literal", "value": "\"default-light\""},
            {"name": "literal", "value": "\"warning\""},
            {"name": "literal", "value": "\"danger\""}
          ]
        },
        "defaultValue": "\"default\""
      },
      {
        "name": "iconName",
        "required": false,
        "description": "the name of the icon to be displayed on the left of the banner",
        "type": {"name": "IconNames"}
      },
      {
        "name": "message",
        "required": true,
        "description": "the message that will appear at the center of the banner",
        "type": {
          "name": "union",
          "raw": "string | React.Element<typeof Text>",
          "elements": [
            {"name": "string"},
            {
              "name": "ReactElement",
              "raw": "React.Element<typeof Text>",
              "elements": [{"name": "Text"}]
            }
          ]
        }
      },
      {
        "name": "additionalContent",
        "required": false,
        "description": "additional content to display in the banner below the message",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "ctaButton",
        "required": false,
        "description": "The call to action button that will appear below the banner message.\nThis button should have intent \"basic\" and kind \"blank\"",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "onClose",
        "required": false,
        "description": "Called when the close button is pressed. If an onClose\nisn't provided, the close button will not appear",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      }
    ]
  },
  "Checkbox": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "A Checkbox input for selecting options in a flexible way. For managing lists of Checkboxes, consider using <a href=\"CheckboxList\">CheckboxList</a>.",
    "name": "Checkbox",
    "shortDescription": "Select options in a flexible way.",
    "status": "Stable",
    "componentPath": "Checkbox",
    "repoFilePath": "webpack/assets/javascripts/latitude/Checkbox.jsx",
    "props": [
      {
        "name": "checked",
        "required": false,
        "description": "Whether the checkbox is checked.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "indeterminate",
        "required": false,
        "description": "Whether the checkbox is indeterminate. The indeterminate state is a visual change only — checkboxes can be checked or unchecked while also being indeterminate. If checked=true, the indeterminate state will not show.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "disabled",
        "required": false,
        "description": "Whether the checkbox can be checked or unchecked.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "Whether the checkbox is invalid",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "label",
        "required": false,
        "description": "The string or react node that illustrates what the check represents.",
        "type": {
          "name": "union",
          "raw": "string | React.Node",
          "elements": [
            {"name": "string"},
            {"name": "ReactNode", "raw": "React.Node"}
          ]
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "The function invoked when the input is clicked.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(checked: boolean) => void",
          "signature": {
            "arguments": [{"name": "checked", "type": {"name": "boolean"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "size",
        "required": false,
        "description": "The size of the checkbox.",
        "type": {
          "name": "union",
          "raw": "\"s\" | \"l\"",
          "elements": [
            {"name": "literal", "value": "\"s\""},
            {"name": "literal", "value": "\"l\""}
          ]
        },
        "defaultValue": "\"s\""
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "The function called when a user blurs off the input",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "wrapLabel",
        "required": false,
        "description": "Whether to allow the label text to wrap",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      }
    ]
  },
  "CheckboxList": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "CheckboxList",
    "shortDescription": "CheckboxList manages the states of multiple checkboxes via an array of options and values",
    "status": "Stable",
    "componentPath": "CheckboxList",
    "repoFilePath": "webpack/assets/javascripts/latitude/CheckboxList.jsx",
    "props": [
      {
        "name": "values",
        "required": true,
        "description": "values specify which checkboxes are in the `checked` state.",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "T"}],
          "raw": "$ReadOnlyArray<T>"
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "onChange is called with the array of the values of every checkbox that\nis currently checked. The order of values is consistent with the order\nin which they are provided via options.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(values: $ReadOnlyArray<T>) => void",
          "signature": {
            "arguments": [
              {
                "name": "values",
                "type": {
                  "name": "$ReadOnlyArray",
                  "elements": [{"name": "T"}],
                  "raw": "$ReadOnlyArray<T>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "options",
        "required": true,
        "description": "The options the checkbox should display. The order options are provided\ndetermines the order in which they appear in the Checkbox list.",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {"name": "Option", "elements": [{"name": "T"}], "raw": "Option<T>"}
          ],
          "raw": "$ReadOnlyArray<Option<T>>"
        }
      },
      {
        "name": "isInline",
        "required": false,
        "description": "Determines whether the checkboxes will run inline (horizontally), or\nvertically.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "gap",
        "required": false,
        "description": "The gap in pixels between Checkboxes.",
        "type": {"name": "number"},
        "defaultValue": "4"
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "Whether the checkbox list is invalid",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "showSelectAllOption",
        "required": false,
        "description": "Whether the checkbox list has a select all checkbox at the top of the list",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "DeprecatedHorizontalGroup": {
    "brandStatus": "V2",
    "category": "Layout",
    "description": "",
    "name": "DeprecatedHorizontalGroup",
    "shortDescription": "Horizontally distribute elements using standard whitespace and simple flexbox rules",
    "status": "Deprecated",
    "componentPath": "DeprecatedHorizontalGroup",
    "repoFilePath": "webpack/assets/javascripts/latitude/DeprecatedHorizontalGroup.jsx",
    "props": [
      {
        "name": "basis",
        "required": false,
        "description": "The percentage of the parent that each child should occupy.",
        "type": {"name": "number"}
      },
      {
        "name": "children",
        "required": false,
        "description": "Children can be any React.Node and will be auto laid out based on Group's props.",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "crossAlign",
        "required": false,
        "description": "The flexbox align-items property which generally adjusts the vertical flex layout of the items.",
        "type": {
          "name": "union",
          "raw": "$Keys<typeof CROSS_ALIGN_CLASS_MAP>",
          "elements": [
            {"name": "literal", "value": "baseline"},
            {"name": "literal", "value": "center"},
            {"name": "literal", "value": "start"},
            {"name": "literal", "value": "end"},
            {"name": "literal", "value": "stretch"},
            {"name": "literal", "value": "default"}
          ]
        },
        "defaultValue": "\"baseline\""
      },
      {
        "name": "fill",
        "required": false,
        "description": "Whether the elements should grow to fill the width of their container.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "mainAlign",
        "required": false,
        "description": "The flexbox justify-content property which generally adjusts the horizontal layout of the items.",
        "type": {
          "name": "union",
          "raw": "$Keys<typeof MAIN_ALIGN_CLASS_MAP>",
          "elements": [
            {"name": "literal", "value": "start"},
            {"name": "literal", "value": "end"},
            {"name": "literal", "value": "center"},
            {"name": "literal", "value": "between"},
            {"name": "literal", "value": "around"},
            {"name": "literal", "value": "default"}
          ]
        },
        "defaultValue": "\"default\""
      },
      {
        "name": "minWidth",
        "required": false,
        "description": "The minimum width of each child.",
        "type": {"name": "number"}
      },
      {
        "name": "spacing",
        "required": false,
        "description": "The gap between elements.",
        "type": {"name": "unknown"},
        "defaultValue": "\"s\""
      },
      {
        "name": "wrap",
        "required": false,
        "description": "Whether the elements should wrap.",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      }
    ]
  },
  "DeprecatedVerticalGroup": {
    "brandStatus": "V2",
    "category": "Layout",
    "description": "",
    "name": "DeprecatedVerticalGroup",
    "shortDescription": "Vertically distribute elements using standard whitespace and simple flexbox rules",
    "status": "Deprecated",
    "componentPath": "DeprecatedVerticalGroup",
    "repoFilePath": "webpack/assets/javascripts/latitude/DeprecatedVerticalGroup.jsx",
    "props": [
      {
        "name": "children",
        "required": false,
        "description": "Children can be any React.Node and will be auto laid out based on Group's props.",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "crossAlign",
        "required": false,
        "description": "The flexbox align-items property which generally adjusts the vertical flex layout of the items.",
        "type": {
          "name": "union",
          "raw": "$Keys<typeof CROSS_ALIGN_CLASS_MAP>",
          "elements": [
            {"name": "literal", "value": "baseline"},
            {"name": "literal", "value": "center"},
            {"name": "literal", "value": "start"},
            {"name": "literal", "value": "end"},
            {"name": "literal", "value": "default"}
          ]
        },
        "defaultValue": "\"default\""
      },
      {
        "name": "fill",
        "required": false,
        "description": "Whether the elements should grow to fill the width of their container.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "mainAlign",
        "required": false,
        "description": "The flexbox justify-content property which generally adjusts the horizontal layout of the items.",
        "type": {
          "name": "union",
          "raw": "$Keys<typeof MAIN_ALIGN_CLASS_MAP>",
          "elements": [
            {"name": "literal", "value": "start"},
            {"name": "literal", "value": "end"},
            {"name": "literal", "value": "center"},
            {"name": "literal", "value": "between"},
            {"name": "literal", "value": "around"},
            {"name": "literal", "value": "default"}
          ]
        },
        "defaultValue": "\"default\""
      },
      {
        "name": "minWidth",
        "required": false,
        "description": "The minimum width of each child.",
        "type": {"name": "number"}
      },
      {
        "name": "spacing",
        "required": false,
        "description": "The gap between elements.",
        "type": {"name": "unknown"},
        "defaultValue": "\"s\""
      }
    ]
  },
  "Drawer": {
    "brandStatus": "V3",
    "category": "Layout",
    "description": "",
    "name": "Drawer",
    "shortDescription": "Drawers slide in from the side of the viewport and allow for any custom content",
    "status": "Beta",
    "componentPath": "Drawer",
    "repoFilePath": "webpack/assets/javascripts/latitude/Drawer.jsx",
    "props": [
      {
        "name": "children",
        "required": false,
        "description": "",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "title",
        "required": true,
        "description": "",
        "type": {"name": "string"}
      },
      {
        "name": "navOffset",
        "required": false,
        "description": "",
        "type": {"name": "number"},
        "defaultValue": "WORKSPACE_DEFAULT_NAV_HEIGHT"
      },
      {
        "name": "isOpen",
        "required": true,
        "description": "",
        "type": {"name": "boolean"}
      },
      {
        "name": "onClose",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      }
    ]
  },
  "DropdownButton": {
    "brandStatus": "V2",
    "category": "Interaction",
    "description": "Use this component for dropdowns with selectable options. For a dropdown with custom rendering check out the CustomDropdownButton component.",
    "name": "DropdownButton",
    "shortDescription": "Use a button to launch a simple dropdown. The button's on click will be hijacked and replaced, so don't bother specifying one.",
    "status": "Stable",
    "componentPath": "DropdownButton",
    "repoFilePath": "webpack/assets/javascripts/latitude/DropdownButton.jsx",
    "props": [
      {
        "name": "disabled",
        "required": false,
        "description": "Makes the field unclickable and greyed out.",
        "type": {"name": "boolean"}
      },
      {
        "name": "button",
        "required": true,
        "description": "The button that triggers the dropdown menu.",
        "type": {
          "name": "ReactElement",
          "raw": "React.Element<Button | IconButton | ToggleButton>",
          "elements": [
            {
              "name": "union",
              "raw": "Button | IconButton | ToggleButton",
              "elements": [
                {"name": "Button"},
                {"name": "IconButton"},
                {"name": "ToggleButton"}
              ]
            }
          ]
        }
      },
      {
        "name": "options",
        "required": true,
        "description": "The options to render in the dropdown list.",
        "type": {
          "name": "Array",
          "elements": [{"name": "DropdownOption"}],
          "raw": "Array<DropdownOption>"
        }
      },
      {
        "name": "menuAlignRight",
        "required": false,
        "description": "Aligns the right part of the menu with the right border of the button; by default, it is left-left.",
        "type": {"name": "boolean"}
      }
    ]
  },
  "Flag": {
    "brandStatus": "V2",
    "category": "General",
    "description": "",
    "name": "Flag",
    "shortDescription": "An SVG icon component specifically for country flags.",
    "status": "Stable",
    "componentPath": "Flag",
    "repoFilePath": "webpack/assets/javascripts/latitude/Flag.jsx",
    "props": [
      {
        "name": "countryCode",
        "required": true,
        "description": "The `ISO 3166-1 aplpha` 2 character country code that you wish to display",
        "type": {"name": "unknown"}
      },
      {
        "name": "maxWidth",
        "required": false,
        "description": "Flags have square dimensions and will default to width: 100% unless a maxWidth is specified.",
        "type": {"name": "number"}
      }
    ]
  },
  "FloatInput": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "FloatInput will process user-entered values per keystroke only. However, poorly formatted numbers will not trigger onChange events. Instead, the input will reset unparseable user values on blur to the originally provided value.",
    "name": "FloatInput",
    "shortDescription": "Collect simple numerical input from the user.",
    "status": "Stable",
    "componentPath": "FloatInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/FloatInput.jsx",
    "props": [
      {
        "name": "value",
        "required": true,
        "description": "",
        "type": {"name": "number", "nullable": true}
      },
      {
        "name": "placeholder",
        "required": false,
        "description": "",
        "type": {"name": "string"}
      },
      {
        "name": "decimalPrecision",
        "required": false,
        "description": "The the number of digits after the decimal the inputted number will be rounded to.\nMust be between 0 and 100.",
        "type": {"name": "number"}
      },
      {
        "name": "disabled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"}
      },
      {
        "name": "readOnly",
        "required": false,
        "description": "",
        "type": {"name": "boolean"}
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "",
        "type": {"name": "boolean"}
      },
      {
        "name": "isPrefilled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"}
      },
      {
        "name": "size",
        "required": false,
        "description": "",
        "type": {"name": "Size"}
      },
      {
        "name": "inputRef",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(HTMLElement | null) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "HTMLElement | null",
                  "elements": [{"name": "HTMLElement"}, {"name": "null"}]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(?number) => void",
          "signature": {
            "arguments": [
              {"name": "", "type": {"name": "number", "nullable": true}}
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onClick",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onFocus",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onKeyDown",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "KeyboardEvent => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "KeyboardEvent"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "name",
        "required": false,
        "description": "named inputs; only use this if you need the form data API to work.",
        "type": {"name": "string"}
      },
      {
        "name": "textAlign",
        "required": false,
        "description": "",
        "type": {
          "name": "union",
          "raw": "\"left\" | \"right\" | \"center\"",
          "elements": [
            {"name": "literal", "value": "\"left\""},
            {"name": "literal", "value": "\"right\""},
            {"name": "literal", "value": "\"center\""}
          ]
        }
      },
      {
        "name": "maxLength",
        "required": false,
        "description": "",
        "type": {"name": "number"}
      },
      {
        "name": "prefix",
        "required": false,
        "description": "",
        "type": {"name": "InputPrefixSuffix"}
      },
      {
        "name": "suffix",
        "required": false,
        "description": "",
        "type": {"name": "InputPrefixSuffix"}
      }
    ]
  },
  "GraphicIcon": {
    "brandStatus": "V2",
    "category": "General",
    "description": "",
    "name": "GraphicIcon",
    "shortDescription": "Detailed SVG illustrations made for empty states, loading states, and ownable moments.",
    "status": "Stable",
    "componentPath": "GraphicIcon",
    "repoFilePath": "webpack/assets/javascripts/latitude/GraphicIcon.jsx",
    "props": [
      {
        "name": "icon",
        "required": true,
        "description": "Illustrations available are designed on a case-by-case basis and generally have specific intentions.",
        "type": {"name": "GraphicIcons"}
      },
      {
        "name": "width",
        "required": false,
        "description": "Width can be any pixel value. If \"auto\" is passed, then a width of 100% will be assigned so the SVG fills it's container.",
        "type": {
          "name": "union",
          "raw": "number | \"auto\"",
          "elements": [
            {"name": "number"},
            {"name": "literal", "value": "\"auto\""}
          ]
        },
        "defaultValue": "320"
      }
    ]
  },
  "Group": {
    "brandStatus": "V3",
    "category": "Layout",
    "description": "Building UI often involves simple horizontal and vertical distribution of elements, e.g. a row of buttons or a stack fields. `Group` distributes and aligns its children in a standardized way. \n\n Use `Group` instead of creating one-off styles for simple things like paddings, margins, and alignment. \n\n If you know flexbox, the `Group` API will be familiar. But don't use `Group` when you really want flexbox. `Group` is **not** syntax sugar for flexbox. \n\n Instead, more general flexbox layouts should be custom implemented with Aphrodite stylesheets on a case-by-case basis. \n\n If you're looking for flexbox resources check out these links: [MDN - Basic Concepts of Flexbox][1], [MDN - Typical use cases of Flexbox][2], and [MDN - Controlling Ratios of Flex Items][3] \n\n [1]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox \n\n [2]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Typical_Use_Cases_of_Flexbox \n\n [3]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Controlling_Ratios_of_Flex_Items_Along_the_Main_Ax",
    "name": "Group",
    "shortDescription": "Distribute and align elements linearly.",
    "status": "Stable",
    "componentPath": "Group",
    "repoFilePath": "webpack/assets/javascripts/latitude/Group.jsx",
    "props": [
      {
        "name": "children",
        "required": false,
        "description": "Children can be any React.Node and will be distributed based on the other props",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "gap",
        "required": false,
        "description": "The gap between elements. (0, 1, 2, 4n)",
        "type": {"name": "number"},
        "defaultValue": "8"
      },
      {
        "name": "fillChildren",
        "required": false,
        "description": "Applies `flex: 1` to every child which provides an even distribution of elements in horizontal layouts.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "flexWrap",
        "required": false,
        "description": "Sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.",
        "type": {
          "name": "union",
          "raw": "\"nowrap\" | \"wrap\" | \"wrap-reverse\"",
          "elements": [
            {"name": "literal", "value": "\"nowrap\""},
            {"name": "literal", "value": "\"wrap\""},
            {"name": "literal", "value": "\"wrap-reverse\""}
          ]
        },
        "defaultValue": "\"wrap\""
      },
      {
        "name": "flexDirection",
        "required": false,
        "description": "Sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).",
        "type": {
          "name": "union",
          "raw": "\"row\" | \"row-reverse\" | \"column\" | \"column-reverse\"",
          "elements": [
            {"name": "literal", "value": "\"row\""},
            {"name": "literal", "value": "\"row-reverse\""},
            {"name": "literal", "value": "\"column\""},
            {"name": "literal", "value": "\"column-reverse\""}
          ]
        },
        "defaultValue": "\"row\""
      },
      {
        "name": "justifyContent",
        "required": false,
        "description": "Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.",
        "type": {
          "name": "union",
          "raw": "| \"center\"\n| \"start\"\n| \"end\"\n| \"flex-start\"\n| \"flex-end\"\n| \"left\"\n| \"right\"\n| \"normal\"\n| \"space-between\"\n| \"space-around\"\n| \"space-evenly\"\n| \"stretch\"\n| \"safe center\"\n| \"unsafe center\"",
          "elements": [
            {"name": "literal", "value": "\"center\""},
            {"name": "literal", "value": "\"start\""},
            {"name": "literal", "value": "\"end\""},
            {"name": "literal", "value": "\"flex-start\""},
            {"name": "literal", "value": "\"flex-end\""},
            {"name": "literal", "value": "\"left\""},
            {"name": "literal", "value": "\"right\""},
            {"name": "literal", "value": "\"normal\""},
            {"name": "literal", "value": "\"space-between\""},
            {"name": "literal", "value": "\"space-around\""},
            {"name": "literal", "value": "\"space-evenly\""},
            {"name": "literal", "value": "\"stretch\""},
            {"name": "literal", "value": "\"safe center\""},
            {"name": "literal", "value": "\"unsafe center\""}
          ]
        },
        "defaultValue": "\"flex-start\""
      },
      {
        "name": "alignItems",
        "required": false,
        "description": "Controls the alignment of items on the Cross Axis.",
        "type": {
          "name": "union",
          "raw": "| \"normal\"\n| \"stretch\"\n| \"center\"\n| \"start\"\n| \"end\"\n| \"flex-start\"\n| \"flex-end\"\n| \"self-start\"\n| \"self-end\"\n| \"baseline\"\n| \"first baseline\"\n| \"last baseline\"\n| \"safe center\"\n| \"unsafe center\"",
          "elements": [
            {"name": "literal", "value": "\"normal\""},
            {"name": "literal", "value": "\"stretch\""},
            {"name": "literal", "value": "\"center\""},
            {"name": "literal", "value": "\"start\""},
            {"name": "literal", "value": "\"end\""},
            {"name": "literal", "value": "\"flex-start\""},
            {"name": "literal", "value": "\"flex-end\""},
            {"name": "literal", "value": "\"self-start\""},
            {"name": "literal", "value": "\"self-end\""},
            {"name": "literal", "value": "\"baseline\""},
            {"name": "literal", "value": "\"first baseline\""},
            {"name": "literal", "value": "\"last baseline\""},
            {"name": "literal", "value": "\"safe center\""},
            {"name": "literal", "value": "\"unsafe center\""}
          ]
        },
        "defaultValue": "\"stretch\""
      },
      {
        "name": "containerFlex",
        "required": false,
        "description": "",
        "type": {
          "name": "union",
          "raw": "number | \"none\"",
          "elements": [
            {"name": "number"},
            {"name": "literal", "value": "\"none\""}
          ]
        },
        "defaultValue": "1"
      }
    ]
  },
  "HelpTooltip": {
    "brandStatus": "V2",
    "category": "Data Display",
    "description": "Tooltips often provide additional information that doesn't fit in the standard layout. HelpTooltip, a thin wrapper around `Tooltip`, provides easy access to a simple icon-triggered tooltip. Icons are a great way to indicate tooltips while saving crucial space. The icon selected should, in some way, correlate to the information provided (ie. if it is a warnining, attention would be a good choice).",
    "name": "HelpTooltip",
    "shortDescription": "A simple icon-triggered message that provides auxilliary information that might be too verbose to always expose.",
    "status": "Stable",
    "componentPath": "HelpTooltip",
    "repoFilePath": "webpack/assets/javascripts/latitude/HelpTooltip.jsx",
    "props": [
      {
        "name": "text",
        "required": true,
        "description": "The actual text that should be displayed in the tooltip.",
        "type": {"name": "string"}
      },
      {
        "name": "position",
        "required": false,
        "description": "Where the tooltip is placed relative to the hoverable trigger element.",
        "type": {
          "name": "union",
          "raw": "\"left\" | \"right\" | \"top\" | \"bottom\"",
          "elements": [
            {"name": "literal", "value": "\"left\""},
            {"name": "literal", "value": "\"right\""},
            {"name": "literal", "value": "\"top\""},
            {"name": "literal", "value": "\"bottom\""}
          ]
        },
        "defaultValue": "\"right\""
      },
      {
        "name": "size",
        "required": false,
        "description": "The size of the tooltip trigger icon.",
        "type": {"name": "StandardIconSizes"},
        "defaultValue": "\"m\""
      },
      {
        "name": "iconName",
        "required": false,
        "description": "The icon selected as the tooltip trigger.",
        "type": {"name": "IconNames"},
        "defaultValue": "\"question\""
      },
      {
        "name": "iconColor",
        "required": false,
        "description": "The color of the tooltip icon trigger (see styles/colors for a full list of usable colors)",
        "type": {"name": "Color"}
      },
      {
        "name": "maxWidth",
        "required": false,
        "description": "maxWidth of the overlay, strings added to support input like 100%, 50%, em, etc.",
        "type": {
          "name": "union",
          "raw": "number | string",
          "elements": [{"name": "number"}, {"name": "string"}]
        },
        "defaultValue": "150"
      },
      {
        "name": "alignment",
        "required": false,
        "description": "Alignment can be used to either align the `HelpTooltip` to text baseline or to its `center`",
        "type": {
          "name": "union",
          "raw": "\"baseline\" | \"center\"",
          "elements": [
            {"name": "literal", "value": "\"baseline\""},
            {"name": "literal", "value": "\"center\""}
          ]
        },
        "defaultValue": "\"baseline\""
      },
      {
        "name": "deprecatedAllowColorInheritance",
        "required": false,
        "description": "Whether to allow css inheritance of the icon color. See the description in `Icon` *",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      }
    ]
  },
  "Icon": {
    "brandStatus": "V2",
    "category": "General",
    "description": "Our current icon list can be accessed from our [Icon Guidelines](/design/guidelines/iconography).",
    "name": "Icon",
    "shortDescription": "Inline SVG iconography",
    "status": "In Review",
    "componentPath": "Icon",
    "repoFilePath": "webpack/assets/javascripts/latitude/Icon.jsx",
    "props": [
      {
        "name": "size",
        "required": false,
        "description": "The size of the icon represents an enum that defines the width and height of the square icon.",
        "type": {
          "name": "union",
          "raw": "| \"xxxs\"\n| \"xxs\"\n| \"xs\"\n| \"s\"\n| \"m\"\n| \"l\"\n| \"xl\"\n| \"xxl\"",
          "elements": [
            {"name": "literal", "value": "\"xxxs\""},
            {"name": "literal", "value": "\"xxs\""},
            {"name": "literal", "value": "\"xs\""},
            {"name": "literal", "value": "\"s\""},
            {"name": "literal", "value": "\"m\""},
            {"name": "literal", "value": "\"l\""},
            {"name": "literal", "value": "\"xl\""},
            {"name": "literal", "value": "\"xxl\""}
          ]
        }
      },
      {
        "name": "customSize",
        "required": false,
        "description": "A specific number that overrides `size` and sets a specific width and height (commonly used for irregularly large icons).",
        "type": {"name": "number"}
      },
      {
        "name": "iconName",
        "required": true,
        "description": "The name of the icon you intend to use.",
        "type": {"name": "IconNames"}
      },
      {
        "name": "className",
        "required": false,
        "description": "Please do not pass classnames to components via a prop like this.",
        "type": {"name": "string"}
      },
      {
        "name": "color",
        "required": false,
        "description": "Icons inherit text color by default but can be any one of our approved colors.",
        "type": {
          "name": "union",
          "raw": "Color | \"inherit\"",
          "elements": [
            {"name": "Color"},
            {"name": "literal", "value": "\"inherit\""}
          ]
        }
      },
      {
        "name": "deprecatedColor",
        "required": false,
        "description": "",
        "type": {"name": "DeprecatedColor"}
      },
      {
        "name": "alignment",
        "required": false,
        "description": "`baseline` is the default alignment prop since most icons are displayed\ninline with text at the same size at the text. Sometimes, icons need to be\nlarger or smaller than the text; in these scenarios `center` alignment\nshould be used.",
        "type": {
          "name": "union",
          "raw": "\"baseline\" | \"center\"",
          "elements": [
            {"name": "literal", "value": "\"baseline\""},
            {"name": "literal", "value": "\"center\""}
          ]
        },
        "defaultValue": "\"baseline\""
      },
      {
        "name": "isARIAAccessible",
        "required": false,
        "description": "Whether the ARIA accessible title should be included.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "deprecatedAllowColorInheritance",
        "required": false,
        "description": "Pre-css-in-js world icons could willy nilly inherit color from many sources. This is bad and we want to avoid at all costs. This prop defaults to retaining the old behavior.",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      }
    ]
  },
  "InlineEdit": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "InlineEdit",
    "shortDescription": "A wrapper component that transforms an input into an inline-editable input.",
    "status": "Beta",
    "componentPath": "InlineEdit",
    "repoFilePath": "webpack/assets/javascripts/latitude/InlineEdit.jsx",
    "props": [
      {
        "name": "value",
        "required": true,
        "description": "The value to be displayed when in display mode",
        "type": {"name": "T"}
      },
      {
        "name": "placeholder",
        "required": false,
        "description": "A placeholder value to display if value is unset.\nText inputs cannot be unset unless a placeholder is given",
        "type": {"name": "string"}
      },
      {
        "name": "onChange",
        "required": true,
        "description": "Called when the user has approved a change to the input's value",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(newValue: T) => void",
          "signature": {
            "arguments": [{"name": "newValue", "type": {"name": "T"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "editStyle",
        "required": false,
        "description": "Determines the style of edit button to be displayed",
        "type": {
          "name": "union",
          "raw": "\"button\" | \"pencil\"",
          "elements": [
            {"name": "literal", "value": "\"button\""},
            {"name": "literal", "value": "\"pencil\""}
          ]
        },
        "defaultValue": "\"button\""
      },
      {
        "name": "textWrap",
        "required": false,
        "description": "Whether the display mode text will wrap or overflow",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "size",
        "required": false,
        "description": "",
        "type": {
          "name": "union",
          "raw": "\"s\" | \"m\" | \"l\"",
          "elements": [
            {"name": "literal", "value": "\"s\""},
            {"name": "literal", "value": "\"m\""},
            {"name": "literal", "value": "\"l\""}
          ]
        },
        "defaultValue": "\"m\""
      },
      {
        "name": "children",
        "required": true,
        "description": "A renderProp that will render the input with the appropriate props",
        "type": {
          "name": "RenderProp",
          "elements": [{"name": "T"}],
          "raw": "RenderProp<T>"
        }
      },
      {
        "name": "staticView",
        "required": false,
        "description": "A static React Node that will be displayed when in display Mode",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      }
    ]
  },
  "InputError": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "InputError",
    "shortDescription": "Renders error text relating to an input below the input; if not error is shown, the spacing it would have taken up is maintained (to avoid UX jitter).",
    "status": "Stable",
    "componentPath": "InputError",
    "repoFilePath": "webpack/assets/javascripts/latitude/InputError.jsx",
    "props": [
      {
        "name": "errorText",
        "required": true,
        "description": "",
        "type": {
          "name": "union",
          "raw": "string | React.Node",
          "elements": [
            {"name": "string"},
            {"name": "ReactNode", "raw": "React.Node"}
          ]
        }
      },
      {
        "name": "showError",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "children",
        "required": false,
        "description": "",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      }
    ]
  },
  "InputGroup": {
    "brandStatus": "V2",
    "category": "Layout",
    "description": "You may want to use TextInput with InputError or TextInputPrefixSuffix, decorators that modify the look and feel of TextInput. If you need a multiline input, think about using TextareaInput.",
    "name": "InputGroup",
    "shortDescription": "Groups supported inputs into a continuous section",
    "status": "Stable",
    "componentPath": "InputGroup",
    "repoFilePath": "webpack/assets/javascripts/latitude/InputGroup.jsx",
    "props": [
      {
        "name": "customWidthSettings",
        "required": false,
        "description": "",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n  flex?: number,\n  width?: number,\n  minWidth?: number,\n  maxWidth?: number,\n|}",
              "signature": {
                "properties": [
                  {
                    "key": "flex",
                    "value": {"name": "number", "required": false}
                  },
                  {
                    "key": "width",
                    "value": {"name": "number", "required": false}
                  },
                  {
                    "key": "minWidth",
                    "value": {"name": "number", "required": false}
                  },
                  {
                    "key": "maxWidth",
                    "value": {"name": "number", "required": false}
                  }
                ]
              }
            }
          ],
          "raw": "$ReadOnlyArray<CustomWidthSetting>"
        }
      },
      {
        "name": "children",
        "required": true,
        "description": "",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      }
    ]
  },
  "Label": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "Label",
    "shortDescription": "Label should be used in conjunction with input fields.",
    "status": "Stable",
    "componentPath": "Label",
    "repoFilePath": "webpack/assets/javascripts/latitude/Label.jsx",
    "props": [
      {
        "name": "children",
        "required": false,
        "description": "TextField and other form fields can be wrapped by `Label`. Their focus will trigger `Label` focus if it uses EditableField.",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "indicateOptional",
        "required": false,
        "description": "Adds a \" - Optional\" flag to indicate that the field is not required.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "indicateRequired",
        "required": false,
        "description": "Adds a small asterisk to indicate that the field is required.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "onClick",
        "required": false,
        "description": "The function invoked when the label is clicked.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "typeWeight",
        "required": false,
        "description": "The boldness of the label.",
        "type": {"name": "unknown"},
        "defaultValue": "\"regular\""
      },
      {
        "name": "paddingBottom",
        "required": false,
        "description": "Whether the label should include some padding above the child.",
        "type": {
          "name": "union",
          "raw": "\"none\" | \"xs\"",
          "elements": [
            {"name": "literal", "value": "\"none\""},
            {"name": "literal", "value": "\"xs\""}
          ]
        },
        "defaultValue": "\"xs\""
      },
      {
        "name": "value",
        "required": true,
        "description": "The actual value of the label.",
        "type": {
          "name": "union",
          "raw": "string | React.Node",
          "elements": [
            {"name": "string"},
            {"name": "ReactNode", "raw": "React.Node"}
          ]
        }
      },
      {
        "name": "helpTooltip",
        "required": false,
        "description": "Optional help tooltip - either the text for a tooltip with default settings or a custom `HelpTooltip`.",
        "type": {
          "name": "union",
          "raw": "?string | React.Element<typeof HelpTooltip>",
          "elements": [
            {"name": "string", "nullable": true},
            {
              "name": "ReactElement",
              "raw": "React.Element<typeof HelpTooltip>",
              "elements": [{"name": "HelpTooltip"}]
            }
          ]
        }
      }
    ]
  },
  "Link": {
    "brandStatus": "V2",
    "category": "Interaction",
    "description": "If you find that there aren not enough props, feel free to add properties. Really, this is an HTML <a> element, that does the correct thing when it comes to SinglePageApplication routing.",
    "name": "Link",
    "shortDescription": "A thing wrapper around \"a\" that can be used if AnchorButton or TextLink is not sufficient.",
    "status": "Stable",
    "componentPath": "Link",
    "repoFilePath": "webpack/assets/javascripts/latitude/Link.jsx",
    "props": [
      {
        "name": "children",
        "required": true,
        "description": "TextLink tags can only wrap strings. If you find this restrictive, contact @theseus. The thought is we want to avoid the temptation for folks to wrap entire apps or components in TextLink tags, since that usually means a different component should be built.",
        "type": {"name": "ReactNode", "raw": "React.Node", "nullable": true}
      },
      {
        "name": "href",
        "required": false,
        "description": "The url that the link component will direct to.",
        "type": {"name": "string"}
      },
      {
        "name": "openInNewTab",
        "required": false,
        "description": "Should this link open in a new tab, i.e. target='_blank'",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "download",
        "required": false,
        "description": "download attribute will override the target (new tab) behaviour if set to true",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "disableSpaHijack",
        "required": false,
        "description": "our single page app routing (called spaMixin) hijacks all clicks on\nanchor tags. You might not want this, most often for switching between\napplications (you want a full page reload). Set this to true to disable that\nbehavior.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "className",
        "required": false,
        "description": "optional classname element",
        "type": {"name": "string"}
      }
    ]
  },
  "Loader": {
    "brandStatus": "V2",
    "category": "Data Display",
    "description": "",
    "name": "Loader",
    "shortDescription": "A pure CSS loader with an indeterminate loading animation that should be used as a placeholder element to indicate that data is loading.",
    "status": "Stable",
    "componentPath": "Loader",
    "repoFilePath": "webpack/assets/javascripts/latitude/Loader.jsx",
    "props": [
      {
        "name": "children",
        "required": false,
        "description": "The content that is loading",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "loaded",
        "required": true,
        "description": "The loader will take care of the show hide logic. Pass your loading conditional here and wrap your data with this loader.",
        "type": {"name": "boolean"}
      },
      {
        "name": "isFullWidth",
        "required": false,
        "description": "Whether the loader spans the full width of it's container",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "size",
        "required": false,
        "description": "Optionally specify a size for the loader. By default the loader is 50px.",
        "type": {"name": "number"},
        "defaultValue": "50"
      },
      {
        "name": "overlay",
        "required": false,
        "description": "Deprecated! Do not use the overlay prop.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "Logo": {
    "brandStatus": "V2",
    "category": "General",
    "componenentGroup": "Logo",
    "description": "",
    "name": "Logo",
    "shortDescription": "The main logo that represents our brand by spelling out our name.",
    "status": "Stable",
    "componentPath": "Logo",
    "repoFilePath": "webpack/assets/javascripts/latitude/Logo.jsx",
    "props": [
      {
        "name": "colorScheme",
        "required": false,
        "description": "",
        "type": {
          "name": "union",
          "raw": "| \"default\"\n| \"reversed\"\n| \"dark\"\n| \"light\"\n| \"monoBlack\"\n| \"monoWhite\"",
          "elements": [
            {"name": "literal", "value": "\"default\""},
            {"name": "literal", "value": "\"reversed\""},
            {"name": "literal", "value": "\"dark\""},
            {"name": "literal", "value": "\"light\""},
            {"name": "literal", "value": "\"monoBlack\""},
            {"name": "literal", "value": "\"monoWhite\""}
          ]
        },
        "defaultValue": "\"default\""
      },
      {
        "name": "width",
        "required": false,
        "description": "",
        "type": {"name": "number"},
        "defaultValue": "120"
      }
    ]
  },
  "MultiInput": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "MultiInput allows users to input lists of items. Users can paste a comma separated list into the `MultiInput` and `MultiInput` will appropriately parse and split the list.",
    "name": "MultiInput",
    "shortDescription": "An input for creating lists of text items",
    "status": "Beta",
    "componentPath": "MultiInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/MultiInput.jsx",
    "props": [
      {
        "name": "value",
        "required": true,
        "description": "The list of selected options",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "string"}],
          "raw": "$ReadOnlyArray<string>"
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "Whenever an option is added or deleted, onChange is called with all\nthe selected options",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "($ReadOnlyArray<string>) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "$ReadOnlyArray",
                  "elements": [{"name": "string"}],
                  "raw": "$ReadOnlyArray<string>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "searchText",
        "required": false,
        "description": "The input text of the MultiInput. If unspecified, the MultiInput's\ntext input is controlled by the MultiInput.",
        "type": {"name": "string"}
      },
      {
        "name": "onSearch",
        "required": false,
        "description": "Called when the text input value changes",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(search: string) => void",
          "signature": {
            "arguments": [{"name": "search", "type": {"name": "string"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onKeyDown",
        "required": false,
        "description": "Called whenever a key is pressed",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(e: KeyboardEvent) => void",
          "signature": {
            "arguments": [{"name": "e", "type": {"name": "KeyboardEvent"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "Called when the multiInput is blurred",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(e: SyntheticFocusEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "SyntheticFocusEvent",
                  "elements": [{"name": "HTMLInputElement"}],
                  "raw": "SyntheticFocusEvent<HTMLInputElement>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "addValueOnBlur",
        "required": false,
        "description": "Whether or not blurring the input should add the current value",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "size",
        "required": false,
        "description": "The size of the MultiInput",
        "type": {"name": "Size"},
        "defaultValue": "\"m\""
      },
      {
        "name": "placeholder",
        "required": false,
        "description": "Placeholder text that will be displayed when the input is empty",
        "type": {"name": "string"},
        "defaultValue": "\"\""
      },
      {
        "name": "autoFocus",
        "required": false,
        "description": "Focus the input when the component mounts",
        "type": {"name": "boolean"}
      }
    ]
  },
  "Pill": {
    "brandStatus": "V2",
    "category": "Data Display",
    "description": "Pills are useful for organizing information like a group of H.S. codes or product tags. Using pills to organize information can provide a straightforward layout and give the user a simple ability to remove one or multiple items.",
    "name": "Pill",
    "shortDescription": "A compact display component for dismissible information",
    "status": "Beta",
    "componentPath": "Pill",
    "repoFilePath": "webpack/assets/javascripts/latitude/Pill.jsx",
    "props": [
      {
        "name": "children",
        "required": true,
        "description": "The information to display",
        "type": {"name": "string"}
      },
      {
        "name": "onDismiss",
        "required": false,
        "description": "The function invoked when the icon is clicked. If no onDismiss is\nspecified, then the Pill will not be closeable and the close button\nwill be hidden",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "size",
        "required": false,
        "description": "The size of the pill",
        "type": {
          "name": "union",
          "raw": "$Keys<typeof sizes>",
          "elements": [
            {"name": "literal", "value": "xs"},
            {"name": "literal", "value": "s"},
            {"name": "literal", "value": "m"},
            {"name": "literal", "value": "l"}
          ]
        },
        "defaultValue": "\"m\""
      },
      {
        "name": "onMouseEnter",
        "required": false,
        "description": "Called when the cursor enters the Pill",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(e: Event) => void",
          "signature": {
            "arguments": [{"name": "e", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onMouseLeave",
        "required": false,
        "description": "Called when the cursor leaves the Pill",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(e: Event) => void",
          "signature": {
            "arguments": [{"name": "e", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onFocus",
        "required": false,
        "description": "Called when the Pill is focused",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(e: Event) => void",
          "signature": {
            "arguments": [{"name": "e", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      }
    ]
  },
  "PortInput": {
    "brandStatus": "V2",
    "category": "Application",
    "description": "PortInput allows a user to select a port via a searchable text input. It searches the Algolia Port index for ports. You'll notice the type it returns is lacking many of the fields that are available on Algolia. This is by design. If you'd like to get access to more fields, you can pass in an \"algoliaPortToShapedPort\" argument, which will allow you to convert an algolia port into something that works with the rest of your code. This is by design, so that users only get the fields they need, and it is possible to populate an AlgoliaInput with _just_ an id and a name.",
    "name": "PortInput",
    "shortDescription": "A simple chooser for ports.",
    "status": "In Review",
    "componentPath": "PortInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/PortInput.jsx",
    "props": [
      {
        "name": "isLarge",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "value",
        "required": true,
        "description": "",
        "type": {
          "name": "union",
          "raw": "MinimalPort | null",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  +id: number,\n  +name: string,\n}",
              "signature": {
                "properties": [
                  {"key": "id", "value": {"name": "number", "required": true}},
                  {"key": "name", "value": {"name": "string", "required": true}}
                ]
              }
            },
            {"name": "null"}
          ]
        }
      },
      {
        "name": "disabled",
        "required": true,
        "description": "",
        "type": {"name": "boolean"}
      },
      {
        "name": "isInvalid",
        "required": true,
        "description": "",
        "type": {"name": "boolean"}
      },
      {
        "name": "onChange",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(T | null) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "T | null",
                  "elements": [{"name": "T"}, {"name": "null"}]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "placeholder",
        "required": true,
        "description": "Placeholder displayed in the blank selector.",
        "type": {"name": "string"}
      },
      {
        "name": "algoliaPortToShapedPort",
        "required": false,
        "description": "By default, only name and id are returned.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "AlgoliaPort => T",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{\n  +id: number,\n  +name: string,\n  +lat: number,\n  +lng: number,\n  +aliases: $ReadOnlyArray<string>,\n  +country_code: string,\n  +port_name: string,\n  +usage_count: number,\n  +seaport: boolean,\n  +railport: boolean,\n  +roadport: boolean,\n  +airport: boolean,\n  /** optional */\n  +loc_code?: string,\n  +port_code?: string,\n  +customs_district_code?: string,\n  +iata_code?: string,\n  +icao_code?: string,\n  +state?: string,\n  +city?: string,\n  +notes?: string,\n  +timezone?: string,\n}",
                  "signature": {
                    "properties": [
                      {
                        "key": "id",
                        "value": {"name": "number", "required": true}
                      },
                      {
                        "key": "name",
                        "value": {"name": "string", "required": true}
                      },
                      {
                        "key": "lat",
                        "value": {"name": "number", "required": true}
                      },
                      {
                        "key": "lng",
                        "value": {"name": "number", "required": true}
                      },
                      {
                        "key": "aliases",
                        "value": {
                          "name": "$ReadOnlyArray",
                          "elements": [{"name": "string"}],
                          "raw": "$ReadOnlyArray<string>",
                          "required": true
                        }
                      },
                      {
                        "key": "country_code",
                        "value": {"name": "string", "required": true}
                      },
                      {
                        "key": "port_name",
                        "value": {"name": "string", "required": true}
                      },
                      {
                        "key": "usage_count",
                        "value": {"name": "number", "required": true}
                      },
                      {
                        "key": "seaport",
                        "value": {"name": "boolean", "required": true}
                      },
                      {
                        "key": "railport",
                        "value": {"name": "boolean", "required": true}
                      },
                      {
                        "key": "roadport",
                        "value": {"name": "boolean", "required": true}
                      },
                      {
                        "key": "airport",
                        "value": {"name": "boolean", "required": true}
                      },
                      {
                        "key": "loc_code",
                        "value": {"name": "string", "required": false}
                      },
                      {
                        "key": "port_code",
                        "value": {"name": "string", "required": false}
                      },
                      {
                        "key": "customs_district_code",
                        "value": {"name": "string", "required": false}
                      },
                      {
                        "key": "iata_code",
                        "value": {"name": "string", "required": false}
                      },
                      {
                        "key": "icao_code",
                        "value": {"name": "string", "required": false}
                      },
                      {
                        "key": "state",
                        "value": {"name": "string", "required": false}
                      },
                      {
                        "key": "city",
                        "value": {"name": "string", "required": false}
                      },
                      {
                        "key": "notes",
                        "value": {"name": "string", "required": false}
                      },
                      {
                        "key": "timezone",
                        "value": {"name": "string", "required": false}
                      }
                    ]
                  }
                }
              }
            ],
            "return": {"name": "T"}
          }
        },
        "defaultValue": "(algoliaPort: AlgoliaPort) => ({\n  id: algoliaPort.id,\n  name: algoliaPort.name,\n})"
      },
      {
        "name": "searchOptions",
        "required": false,
        "description": "",
        "type": {"name": "AlgoliaSearchOptions"}
      },
      {
        "name": "allowedTransportationModes",
        "required": false,
        "description": "",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "union",
              "raw": "\"air\" | \"ocean\" | \"rail\" | \"truck\"",
              "elements": [
                {"name": "literal", "value": "\"air\""},
                {"name": "literal", "value": "\"ocean\""},
                {"name": "literal", "value": "\"rail\""},
                {"name": "literal", "value": "\"truck\""}
              ]
            }
          ],
          "raw": "$ReadOnlyArray<TransportationMode>"
        }
      },
      {
        "name": "autoFocus",
        "required": false,
        "description": "focus the control when it mounts",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isNullable",
        "required": false,
        "description": "determines if the user can X out a selected value",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      }
    ]
  },
  "ProgressBar": {
    "brandStatus": "V2",
    "category": "Data Display",
    "description": "Indefinite progress bars should be used to indicate that data is loading and will take an unknown amount of time. Progress bars are best used in information-dense UIs like data tables.",
    "name": "ProgressBar",
    "shortDescription": "A pure CSS progress bar with an indeterminate loading animation.",
    "status": "Stable",
    "componentPath": "ProgressBar",
    "repoFilePath": "webpack/assets/javascripts/latitude/ProgressBar.jsx",
    "props": [
      {
        "name": "children",
        "required": false,
        "description": "The content that is loading",
        "type": {"name": "ReactNode", "raw": "React.Node"},
        "defaultValue": "<span />"
      },
      {
        "name": "loaded",
        "required": true,
        "description": "The loader will take care of the show hide logic. Pass your loading conditional here and wrap your data with this loader.",
        "type": {"name": "boolean"}
      },
      {
        "name": "isFullWidth",
        "required": false,
        "description": "Whether the loader spans the full width of it's container",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "overlay",
        "required": false,
        "description": "Deprecated! Do not use the overlay prop.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "SettingsToggle": {
    "brandStatus": "V2",
    "category": "Interaction",
    "description": "**Differences between toggles, checkboxes, and radios** \n\n - Checkboxes and radios are placed to the left of their label, to indicate there’s a selection to be made from a list of related options. \n\n - Whereas toggles are placed to the right of their label, to indicate there’s a setting to be turned off or on. \n\n \n\n **Usage** \n\n - If users must acknowledge something, use a single checkbox as opposed to a toggle. \n\n - Use radio groups and checkbox lists for data entry (usually inside forms), as opposed to toggles. \n\n - When a toggle is clicked on, there should be an immediate change to the view.",
    "name": "SettingsToggle",
    "shortDescription": "Allows users to switch a setting on or off.",
    "status": "Beta",
    "componentPath": "SettingsToggle",
    "repoFilePath": "webpack/assets/javascripts/latitude/SettingsToggle.jsx",
    "props": [
      {
        "name": "checked",
        "required": false,
        "description": "Whether the toggle is on.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "disabled",
        "required": false,
        "description": "Whether the toggle can be interacted with.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "label",
        "required": false,
        "description": "The string or react node that describes what the toggle will change.",
        "type": {
          "name": "union",
          "raw": "string | React.Node",
          "elements": [
            {"name": "string"},
            {"name": "ReactNode", "raw": "React.Node"}
          ]
        },
        "defaultValue": "null"
      },
      {
        "name": "onChange",
        "required": true,
        "description": "The function invoked when the input is clicked.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(checked: boolean) => void",
          "signature": {
            "arguments": [{"name": "checked", "type": {"name": "boolean"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "The function called when a user blurs off the input",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        },
        "defaultValue": "null"
      },
      {
        "name": "wrapLabel",
        "required": false,
        "description": "Whether to allow the label text to wrap",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      }
    ]
  },
  "Text": {
    "brandStatus": "V2",
    "category": "Data Display",
    "description": "This component reduces the variablility of typography in our UI and should give everyone an easy way to reason about the different text sizes.",
    "name": "Text",
    "shortDescription": "Rendering words? Use this component!",
    "status": "Stable",
    "componentPath": "Text",
    "repoFilePath": "webpack/assets/javascripts/latitude/Text.jsx",
    "props": [
      {
        "name": "children",
        "required": true,
        "description": "",
        "type": {"name": "ReactNode", "raw": "React.Node", "nullable": true}
      },
      {
        "name": "color",
        "required": false,
        "description": "A string specifying the color for the Text. Look in styles/colors for a full list.",
        "type": {"name": "Color"},
        "defaultValue": "\"grey60\""
      },
      {
        "name": "scale",
        "required": false,
        "description": "The size of the text. Look in Text for tagMap. Selecting a scale will choose a corresponding semantic html tag.",
        "type": {
          "name": "union",
          "raw": "$Keys<typeof tagMap>",
          "elements": [
            {"name": "literal", "value": "display"},
            {"name": "literal", "value": "headline"},
            {"name": "literal", "value": "title"},
            {"name": "literal", "value": "base"},
            {"name": "literal", "value": "subtext"},
            {"name": "literal", "value": "tiny"}
          ]
        },
        "defaultValue": "\"base\""
      },
      {
        "name": "weight",
        "required": false,
        "description": "The boldness of the text.",
        "type": {
          "name": "union",
          "raw": "\"bold\" | \"regular\"",
          "elements": [
            {"name": "literal", "value": "\"bold\""},
            {"name": "literal", "value": "\"regular\""}
          ]
        },
        "defaultValue": "\"regular\""
      },
      {
        "name": "fontStyle",
        "required": false,
        "description": "The font style for a text.",
        "type": {
          "name": "union",
          "raw": "\"normal\" | \"italic\"",
          "elements": [
            {"name": "literal", "value": "\"normal\""},
            {"name": "literal", "value": "\"italic\""}
          ]
        },
        "defaultValue": "\"normal\""
      },
      {
        "name": "display",
        "required": false,
        "description": "Select a custom display property depending on how you intend to use the text.",
        "type": {
          "name": "union",
          "raw": "| \"inline\"\n| \"inline-block\"\n| \"flex\"\n| \"block\"\n| \"inline-flex\"\n| \"none\"",
          "elements": [
            {"name": "literal", "value": "\"inline\""},
            {"name": "literal", "value": "\"inline-block\""},
            {"name": "literal", "value": "\"flex\""},
            {"name": "literal", "value": "\"block\""},
            {"name": "literal", "value": "\"inline-flex\""},
            {"name": "literal", "value": "\"none\""}
          ]
        },
        "defaultValue": "\"inline-block\""
      },
      {
        "name": "overflow",
        "required": false,
        "description": "The overflow condition for the text content",
        "type": {
          "name": "union",
          "raw": "\"visible\" | \"hidden\" | \"overlay\" | \"scroll\"",
          "elements": [
            {"name": "literal", "value": "\"visible\""},
            {"name": "literal", "value": "\"hidden\""},
            {"name": "literal", "value": "\"overlay\""},
            {"name": "literal", "value": "\"scroll\""}
          ]
        },
        "defaultValue": "\"visible\""
      },
      {
        "name": "textOverflow",
        "required": false,
        "description": "Sets how hidden overflow content is displayed",
        "type": {
          "name": "union",
          "raw": "\"initial\" | \"clip\" | \"ellipsis\"",
          "elements": [
            {"name": "literal", "value": "\"initial\""},
            {"name": "literal", "value": "\"clip\""},
            {"name": "literal", "value": "\"ellipsis\""}
          ]
        },
        "defaultValue": "\"initial\""
      },
      {
        "name": "textTransform",
        "required": false,
        "description": "Sets the capitalization of the text",
        "type": {
          "name": "union",
          "raw": "\"initial\" | \"uppercase\" | \"lowercase\" | \"capitalize\"",
          "elements": [
            {"name": "literal", "value": "\"initial\""},
            {"name": "literal", "value": "\"uppercase\""},
            {"name": "literal", "value": "\"lowercase\""},
            {"name": "literal", "value": "\"capitalize\""}
          ]
        },
        "defaultValue": "\"initial\""
      },
      {
        "name": "emptyRetainsLineHeight",
        "required": false,
        "description": "To maintain the line height when null, undefined, or empty string Set this boolean to true. A space character will be rendered inside the appropriate tag.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "customLineHeight",
        "required": false,
        "description": "A custom line height for this text. This overrides the line height from the `scale` prop.",
        "type": {"name": "string"}
      },
      {
        "name": "wordBreak",
        "required": false,
        "description": "",
        "type": {
          "name": "union",
          "raw": "\"normal\" | \"break-all\" | \"keep-all\" | \"break-word\"",
          "elements": [
            {"name": "literal", "value": "\"normal\""},
            {"name": "literal", "value": "\"break-all\""},
            {"name": "literal", "value": "\"keep-all\""},
            {"name": "literal", "value": "\"break-word\""}
          ]
        },
        "defaultValue": "\"normal\""
      },
      {
        "name": "whiteSpace",
        "required": false,
        "description": "Sets how white space is handled",
        "type": {
          "name": "union",
          "raw": "| \"normal\"\n| \"nowrap\"\n| \"pre\"\n| \"pre-wrap\"\n| \"pre-line\"\n| \"inherit\"",
          "elements": [
            {"name": "literal", "value": "\"normal\""},
            {"name": "literal", "value": "\"nowrap\""},
            {"name": "literal", "value": "\"pre\""},
            {"name": "literal", "value": "\"pre-wrap\""},
            {"name": "literal", "value": "\"pre-line\""},
            {"name": "literal", "value": "\"inherit\""}
          ]
        },
        "defaultValue": "\"inherit\""
      }
    ]
  },
  "TextInput": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "You may want to use TextInput with InputError or TextInputPrefixSuffix, decorators that modify the look and feel of TextInput. If you need a multiline input, think about using TextareaInput.",
    "name": "TextInput",
    "shortDescription": "Collect simple text input from the user.",
    "status": "Stable",
    "componentPath": "TextInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/TextInput.jsx",
    "props": [
      {
        "name": "value",
        "required": true,
        "description": "note that this must be a string, and cannot be null or undefined.",
        "type": {"name": "string"}
      },
      {
        "name": "placeholder",
        "required": false,
        "description": "the placeholder text that will be displayed when the input is empty",
        "type": {"name": "string"},
        "defaultValue": "\"\""
      },
      {
        "name": "disabled",
        "required": false,
        "description": "whether the input is disabled or not",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "readOnly",
        "required": false,
        "description": "whether the input is readonly or not",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "whether the input is invalid or not",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isPrefilled",
        "required": false,
        "description": "whether the input is prefilled or not",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "textOverflow",
        "required": false,
        "description": "whether the input should show ellipsis and a tooltip on overflow",
        "type": {
          "name": "union",
          "raw": "\"clip\" | \"ellipsis\"",
          "elements": [
            {"name": "literal", "value": "\"clip\""},
            {"name": "literal", "value": "\"ellipsis\""}
          ]
        }
      },
      {
        "name": "size",
        "required": false,
        "description": "the size of the input",
        "type": {"name": "Size"},
        "defaultValue": "\"m\""
      },
      {
        "name": "inputRef",
        "required": false,
        "description": "forwards a ref to the inputfield of the input",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(HTMLElement | null) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "HTMLElement | null",
                  "elements": [{"name": "HTMLElement"}, {"name": "null"}]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "called when the value of the textinput changes",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "string => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "string"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onMouseDown",
        "required": false,
        "description": "called on the mouseDown event",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onClick",
        "required": false,
        "description": "called when the keydown event is trigged on the input",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onFocus",
        "required": false,
        "description": "called when the input is focused",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "called when the input is blurred",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onKeyDown",
        "required": false,
        "description": "called when the input is clicked",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "KeyboardEvent => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "KeyboardEvent"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "name",
        "required": false,
        "description": "most Flexport forms do not use the browser FormData API, which requires\nnamed inputs; only use this if you need the form data API to work.",
        "type": {"name": "string"}
      },
      {
        "name": "textAlign",
        "required": false,
        "description": "sets the alignment of the text in the input field",
        "type": {
          "name": "union",
          "raw": "\"left\" | \"right\" | \"center\"",
          "elements": [
            {"name": "literal", "value": "\"left\""},
            {"name": "literal", "value": "\"right\""},
            {"name": "literal", "value": "\"center\""}
          ]
        },
        "defaultValue": "\"left\""
      },
      {
        "name": "type",
        "required": false,
        "description": "the HTML type of this text input, see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input for a complete list",
        "type": {
          "name": "union",
          "raw": "\"text\" | \"password\" | \"email\"",
          "elements": [
            {"name": "literal", "value": "\"text\""},
            {"name": "literal", "value": "\"password\""},
            {"name": "literal", "value": "\"email\""}
          ]
        },
        "defaultValue": "\"text\""
      },
      {
        "name": "maxLength",
        "required": false,
        "description": "the maximum number of characters the textinput will accept",
        "type": {"name": "number"},
        "defaultValue": "255"
      },
      {
        "name": "prefix",
        "required": false,
        "description": "prefix sigil that will appear within and at the start of the input field",
        "type": {
          "name": "union",
          "raw": "| ?string\n| {|iconName: IconNames, onClick?: () => void, onFocus?: () => void|}",
          "elements": [
            {"name": "string", "nullable": true},
            {
              "name": "signature",
              "type": "object",
              "raw": "{|iconName: IconNames, onClick?: () => void, onFocus?: () => void|}",
              "signature": {
                "properties": [
                  {
                    "key": "iconName",
                    "value": {"name": "IconNames", "required": true}
                  },
                  {
                    "key": "onClick",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {"name": "void"}
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "onFocus",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {"name": "void"}
                      },
                      "required": false
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "name": "suffix",
        "required": false,
        "description": "suffix sigil that will appear within and at the end of the input field",
        "type": {
          "name": "union",
          "raw": "| ?string\n| {|iconName: IconNames, onClick?: () => void, onFocus?: () => void|}",
          "elements": [
            {"name": "string", "nullable": true},
            {
              "name": "signature",
              "type": "object",
              "raw": "{|iconName: IconNames, onClick?: () => void, onFocus?: () => void|}",
              "signature": {
                "properties": [
                  {
                    "key": "iconName",
                    "value": {"name": "IconNames", "required": true}
                  },
                  {
                    "key": "onClick",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {"name": "void"}
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "onFocus",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {"name": "void"}
                      },
                      "required": false
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    ]
  },
  "TextInputAutocomplete": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "TextInputAutocomplete is a text input with a suggestions dropdown. By default a maximum of 10 suggestions are displayed by the dropdown.",
    "name": "TextInputAutocomplete",
    "shortDescription": "Collect simple text input from the user with dropdown suggestions",
    "status": "Stable",
    "componentPath": "TextInputAutocomplete",
    "repoFilePath": "webpack/assets/javascripts/latitude/TextInputAutocomplete.jsx",
    "props": [
      {
        "name": "suggestions",
        "required": true,
        "description": "",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "string"}],
          "raw": "$ReadOnlyArray<Option>"
        }
      },
      {
        "name": "optionsFilter",
        "required": false,
        "description": "positively filters an option according to the callback",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(query: string, option: Option) => boolean",
          "signature": {
            "arguments": [
              {"name": "query", "type": {"name": "string"}},
              {"name": "option", "type": {"name": "string"}}
            ],
            "return": {"name": "boolean"}
          }
        },
        "defaultValue": "(query: string, option: Option) => {\n  const trimmedOption = option.toLowerCase().trim();\n  const trimmedQuery = query.toLowerCase().trim();\n\n  return trimmedOption.includes(trimmedQuery);\n}"
      },
      {
        "name": "maximumOptions",
        "required": false,
        "description": "the maximum number of suggestions that will be presented",
        "type": {"name": "number"},
        "defaultValue": "10"
      }
    ]
  },
  "TextLink": {
    "brandStatus": "V2",
    "category": "Interaction",
    "description": "",
    "name": "TextLink",
    "shortDescription": "A TextLink which we can pass in a href for webpage navigation. TextLinks are more accessible (hovering over them shows the link preview in the browser), and don't require JavaScript.",
    "status": "Stable",
    "componentPath": "TextLink",
    "repoFilePath": "webpack/assets/javascripts/latitude/TextLink.jsx",
    "props": [
      {
        "name": "children",
        "required": true,
        "description": "TextLink tags can only wrap strings. If you find this restrictive, contact @theseus. The thought is we want to avoid the temptation for folks to wrap entire apps or components in TextLink tags, since that usually means a different component should be built.",
        "type": {"name": "string"}
      },
      {
        "name": "href",
        "required": true,
        "description": "The url that the link component will direct to.",
        "type": {"name": "string"}
      },
      {
        "name": "linkStyle",
        "required": false,
        "description": "One of three standard link color schemes.",
        "type": {"name": "LinkStyle"},
        "defaultValue": "\"default\""
      },
      {
        "name": "openInNewTab",
        "required": false,
        "description": "Should this link open in a new tab, i.e. target='_blank'",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "scale",
        "required": false,
        "description": "The size of the link which is is a subset of TypeScale's sizes.",
        "type": {
          "name": "union",
          "raw": "\"base\" | \"subtext\" | \"title\"",
          "elements": [
            {"name": "literal", "value": "\"base\""},
            {"name": "literal", "value": "\"subtext\""},
            {"name": "literal", "value": "\"title\""}
          ]
        }
      },
      {
        "name": "weight",
        "required": false,
        "description": "The boldness of the link.",
        "type": {"name": "unknown"}
      },
      {
        "name": "display",
        "required": false,
        "description": "Select a custom display property depending on how you intend to use the link.",
        "type": {
          "name": "union",
          "raw": "| \"inline\"\n| \"inline-block\"\n| \"flex\"\n| \"block\"\n| \"inline-flex\"\n| \"none\"",
          "elements": [
            {"name": "literal", "value": "\"inline\""},
            {"name": "literal", "value": "\"inline-block\""},
            {"name": "literal", "value": "\"flex\""},
            {"name": "literal", "value": "\"block\""},
            {"name": "literal", "value": "\"inline-flex\""},
            {"name": "literal", "value": "\"none\""}
          ]
        },
        "defaultValue": "\"inline-block\""
      },
      {
        "name": "download",
        "required": false,
        "description": "download attribute will override the target (new tab) behaviour if set to true",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "disableSpaHijack",
        "required": false,
        "description": "our single page app routing (called spaMixin) hijacks all clicks on\nanchor tags. You might not want this, most often for switching between\napplications (you want a full page reload). Set this to true to disable that\nbehavior.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "TextLinkAction": {
    "brandStatus": "V2",
    "category": "Interaction",
    "description": "",
    "name": "TextLinkAction",
    "shortDescription": "In general, try and use a TextLink, which takes an href not an onClick. TextLinks are more accessible (hovering over them shows the link preview in the browser), and don't require JavaScript. Sometimes, however, you need to have something that looks and feels like a TextLink but takes an onClick. This is rendered as a button, but can be nested in <Text> like a TextLink",
    "status": "Stable",
    "componentPath": "TextLinkAction",
    "repoFilePath": "webpack/assets/javascripts/latitude/TextLinkAction.jsx",
    "props": [
      {
        "name": "children",
        "required": true,
        "description": "TextLinkAction tags can only wrap strings. If you find this restrictive, contact @theseus. The thought is we want to avoid the temptation for folks to wrap entire apps or components in Link tags, since that usually means a different component should be built.",
        "type": {
          "name": "union",
          "raw": "string | React.ChildrenArray<string>",
          "elements": [
            {"name": "string"},
            {
              "name": "ReactChildrenArray",
              "raw": "React.ChildrenArray<string>",
              "elements": [{"name": "string"}]
            }
          ]
        }
      },
      {
        "name": "onClick",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(e: SyntheticInputEvent<HTMLButtonElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "SyntheticInputEvent",
                  "elements": [{"name": "HTMLButtonElement"}],
                  "raw": "SyntheticInputEvent<HTMLButtonElement>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        },
        "defaultValue": "() => {}"
      },
      {
        "name": "linkStyle",
        "required": false,
        "description": "One of three standard link color schemes.",
        "type": {"name": "LinkStyle"},
        "defaultValue": "\"default\""
      },
      {
        "name": "scale",
        "required": false,
        "description": "The size of the link which is is a subset of TypeScale's sizes.",
        "type": {
          "name": "union",
          "raw": "\"base\" | \"subtext\" | \"title\"",
          "elements": [
            {"name": "literal", "value": "\"base\""},
            {"name": "literal", "value": "\"subtext\""},
            {"name": "literal", "value": "\"title\""}
          ]
        }
      },
      {
        "name": "weight",
        "required": false,
        "description": "The boldness of the link.",
        "type": {
          "name": "union",
          "raw": "\"regular\" | \"bold\"",
          "elements": [
            {"name": "literal", "value": "\"regular\""},
            {"name": "literal", "value": "\"bold\""}
          ]
        }
      },
      {
        "name": "display",
        "required": false,
        "description": "Select a custom display property depending on how you intend to use the link.",
        "type": {
          "name": "union",
          "raw": "| \"inline\"\n| \"inline-block\"\n| \"flex\"\n| \"block\"\n| \"inline-flex\"\n| \"none\"",
          "elements": [
            {"name": "literal", "value": "\"inline\""},
            {"name": "literal", "value": "\"inline-block\""},
            {"name": "literal", "value": "\"flex\""},
            {"name": "literal", "value": "\"block\""},
            {"name": "literal", "value": "\"inline-flex\""},
            {"name": "literal", "value": "\"none\""}
          ]
        },
        "defaultValue": "\"inline-block\""
      },
      {
        "name": "disabled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "TextareaInput": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "You may want to use TextareaInput with InputError, a decorator that modify the look and feel of TextareaInput. If you need a single-line text input, think about using TextInput.",
    "name": "TextareaInput",
    "shortDescription": "Collect multi-line text input from the user",
    "status": "Stable",
    "componentPath": "TextareaInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/TextareaInput.jsx",
    "props": [
      {
        "name": "value",
        "required": true,
        "description": "The text value of the input. This must be a string and cannot be null or undefined",
        "type": {"name": "string"}
      },
      {
        "name": "placeholder",
        "required": false,
        "description": "the placeholder text that will be displayed when the input is empty",
        "type": {"name": "string"},
        "defaultValue": "\"\""
      },
      {
        "name": "textAlign",
        "required": false,
        "description": "sets the alignment of the text within the input field",
        "type": {
          "name": "union",
          "raw": "\"left\" | \"right\" | \"center\"",
          "elements": [
            {"name": "literal", "value": "\"left\""},
            {"name": "literal", "value": "\"right\""},
            {"name": "literal", "value": "\"center\""}
          ]
        },
        "defaultValue": "\"left\""
      },
      {
        "name": "rows",
        "required": false,
        "description": "number of rows in the text area. If {min, max} row count is specified,\nthen textarea input will auto-expand with the user input",
        "type": {
          "name": "union",
          "raw": "number | {|+min: number, +max: number|}",
          "elements": [
            {"name": "number"},
            {
              "name": "signature",
              "type": "object",
              "raw": "{|+min: number, +max: number|}",
              "signature": {
                "properties": [
                  {"key": "min", "value": {"name": "number", "required": true}},
                  {"key": "max", "value": {"name": "number", "required": true}}
                ]
              }
            }
          ]
        },
        "defaultValue": "2"
      },
      {
        "name": "disabled",
        "required": false,
        "description": "whether the input is disabled or not",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "readOnly",
        "required": false,
        "description": "whether the input is readonly or not",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "whether the input is invalid or not",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "size",
        "required": false,
        "description": "the size of the input",
        "type": {"name": "Size"},
        "defaultValue": "\"m\""
      },
      {
        "name": "inputRef",
        "required": false,
        "description": "forwards a ref to the input field",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(HTMLTextAreaElement | null) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "HTMLTextAreaElement | null",
                  "elements": [
                    {"name": "HTMLTextAreaElement"},
                    {"name": "null"}
                  ]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "called when the value in the textarea input changes",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "string => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "string"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onClick",
        "required": false,
        "description": "called when the input is clicked",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onFocus",
        "required": false,
        "description": "called when the input is focused",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "called when the input is blurred",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onPaste",
        "required": false,
        "description": "called when the paste event is triggered on the input",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "ClipboardEvent => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "ClipboardEvent"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onKeyDown",
        "required": false,
        "description": "called when the keydown event is triggered on the input",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "KeyboardEvent => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "KeyboardEvent"}}],
            "return": {"name": "void"}
          }
        }
      }
    ]
  },
  "ProfileDropdown": {
    "brandStatus": "V2",
    "category": "Application",
    "description": "",
    "name": "ProfileDropdown",
    "shortDescription": "Use ProfileDropdown when you want to create a dropdown with options along with user avatar.",
    "status": "Stable",
    "componentPath": "application/ProfileDropdown",
    "repoFilePath": "webpack/assets/javascripts/latitude/application/ProfileDropdown.jsx",
    "props": [
      {
        "name": "isAppOutOfDate",
        "required": true,
        "description": "determines the header color based on the value of isAppOutOfDate",
        "type": {"name": "boolean"}
      },
      {
        "name": "showTitleInHeader",
        "required": true,
        "description": "determines if we should the title in dropdown header",
        "type": {"name": "boolean"}
      },
      {
        "name": "handleShowAccountSettings",
        "required": true,
        "description": "handles whether we display the account settings modal",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "showAvatar",
        "required": false,
        "description": "determines if we show avatar on dropdown header and dropdown menu",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "userOptionConfigList",
        "required": false,
        "description": "config to show custom options passed by the user",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "union",
              "raw": "| {|\n    +type: \"link\",\n    +title: string,\n    +linkAttrs: {|+href: string, +\"data-method\"?: string|},\n  |}\n| {|\n    +type: \"button\",\n    +title: string,\n    +onHandleClickUserOption: () => void,\n  |}",
              "elements": [
                {
                  "name": "signature",
                  "type": "object",
                  "raw": "{|\n    +type: \"link\",\n    +title: string,\n    +linkAttrs: {|+href: string, +\"data-method\"?: string|},\n  |}",
                  "signature": {
                    "properties": [
                      {
                        "key": "type",
                        "value": {
                          "name": "literal",
                          "value": "\"link\"",
                          "required": true
                        }
                      },
                      {
                        "key": "title",
                        "value": {"name": "string", "required": true}
                      },
                      {
                        "key": "linkAttrs",
                        "value": {
                          "name": "signature",
                          "type": "object",
                          "raw": "{|+href: string, +\"data-method\"?: string|}",
                          "signature": {
                            "properties": [
                              {
                                "key": "href",
                                "value": {"name": "string", "required": true}
                              },
                              {
                                "key": "data-method",
                                "value": {"name": "string", "required": false}
                              }
                            ]
                          },
                          "required": true
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "signature",
                  "type": "object",
                  "raw": "{|\n    +type: \"button\",\n    +title: string,\n    +onHandleClickUserOption: () => void,\n  |}",
                  "signature": {
                    "properties": [
                      {
                        "key": "type",
                        "value": {
                          "name": "literal",
                          "value": "\"button\"",
                          "required": true
                        }
                      },
                      {
                        "key": "title",
                        "value": {"name": "string", "required": true}
                      },
                      {
                        "key": "onHandleClickUserOption",
                        "value": {
                          "name": "signature",
                          "type": "function",
                          "raw": "() => void",
                          "signature": {
                            "arguments": [],
                            "return": {"name": "void"}
                          },
                          "required": true
                        }
                      }
                    ]
                  }
                }
              ]
            }
          ],
          "raw": "$ReadOnlyArray<UserOptionDropDown>"
        },
        "defaultValue": "[]"
      },
      {
        "name": "user",
        "required": true,
        "description": "user object to supply user dropdown",
        "type": {"name": "User"}
      },
      {
        "name": "displayDropdownEmailTitle",
        "required": false,
        "description": "if toggled to true, we will display email as head title. Else, we will display the username",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "disableDropdownArrow",
        "required": false,
        "description": "disables the arrow on the dropdown button for styling purposes",
        "type": {"name": "boolean"}
      }
    ]
  },
  "TransportationModeIcon": {
    "brandStatus": "V2",
    "category": "Application",
    "description": "A commonly used icon, that takes in a mode of transportation and displays the correct <Icon /> \n\n FCL and LCL are annotated with text underneath them, to differentiate the ship icon",
    "name": "TransportationModeIcon",
    "shortDescription": "A commonly used application component that displays an icon for a transportation mode.",
    "status": "In Review",
    "componentPath": "application/TransportationModeIcon",
    "repoFilePath": "webpack/assets/javascripts/latitude/application/TransportationModeIcon.jsx",
    "props": [
      {
        "name": "mode",
        "required": true,
        "description": "",
        "type": {
          "name": "union",
          "raw": "| TransportationModeType\n| \"insurance\"\n| \"ocean_fcl\"\n| \"ocean_lcl\"\n| \"%future added value\"",
          "elements": [
            {"name": "TransportationModeType"},
            {"name": "literal", "value": "\"insurance\""},
            {"name": "literal", "value": "\"ocean_fcl\""},
            {"name": "literal", "value": "\"ocean_lcl\""},
            {"name": "literal", "value": "\"%future added value\""}
          ],
          "nullable": true
        }
      },
      {
        "name": "size",
        "required": false,
        "description": "",
        "type": {
          "name": "union",
          "raw": "$Keys<typeof SIZES>",
          "elements": [
            {"name": "literal", "value": "xs"},
            {"name": "literal", "value": "s"},
            {"name": "literal", "value": "m"},
            {"name": "literal", "value": "l"}
          ]
        },
        "defaultValue": "\"m\""
      },
      {
        "name": "color",
        "required": false,
        "description": "",
        "type": {"name": "DeprecatedColor"},
        "defaultValue": "undefined"
      },
      {
        "name": "customSize",
        "required": false,
        "description": "",
        "type": {"name": "number"}
      }
    ]
  },
  "AnchorButton": {
    "brandStatus": "V2",
    "category": "Interaction",
    "description": "",
    "name": "AnchorButton",
    "shortDescription": "Just like button but with anchor tags and an href prop. AnchorButton can be used for launching downloads, linking to new in-app routes, or linking to an external resource.",
    "status": "Stable",
    "componentPath": "button/AnchorButton",
    "repoFilePath": "webpack/assets/javascripts/latitude/button/AnchorButton.jsx",
    "props": [
      {
        "name": "intent",
        "required": false,
        "description": "We skew toward only using specifying an intent when there is a direct correlation to the primary action. Intents convey meaning and reinforce importance.",
        "type": {"name": "ButtonIntent"},
        "defaultValue": "\"none\""
      },
      {
        "name": "size",
        "required": false,
        "description": "Defines the height of the button. Button sizes correspond to the main form sizes.",
        "type": {
          "name": "union",
          "raw": "\"s\" | \"m\" | \"l\"",
          "elements": [
            {"name": "literal", "value": "\"s\""},
            {"name": "literal", "value": "\"m\""},
            {"name": "literal", "value": "\"l\""}
          ]
        },
        "defaultValue": "\"m\""
      },
      {
        "name": "kind",
        "required": false,
        "description": "Solid buttons usually constitute a primary action and hollow buttons are generally secondary. Bare buttons can be used for rows of buttons or for more subtle buttons.",
        "type": {
          "name": "union",
          "raw": "\"solid\" | \"hollow\" | \"bare\" | \"blank\"",
          "elements": [
            {"name": "literal", "value": "\"solid\""},
            {"name": "literal", "value": "\"hollow\""},
            {"name": "literal", "value": "\"bare\""},
            {"name": "literal", "value": "\"blank\""}
          ]
        },
        "defaultValue": "\"hollow\""
      },
      {
        "name": "width",
        "required": false,
        "description": "Buttons should generally use auto width (\"responsive\"). Full width buttons work great for tables.",
        "type": {
          "name": "union",
          "raw": "\"responsive\" | \"full\"",
          "elements": [
            {"name": "literal", "value": "\"responsive\""},
            {"name": "literal", "value": "\"full\""}
          ]
        },
        "defaultValue": "\"responsive\""
      },
      {
        "name": "label",
        "required": false,
        "description": "The text that represents the primary action of the button.",
        "type": {"name": "string"}
      },
      {
        "name": "disabled",
        "required": false,
        "description": "Anchor tags can't technically be disabled so this prop removes the href, desaturates the color of the label, and removes pointer-events.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "href",
        "required": false,
        "description": "The url that should be navigated to upon click",
        "type": {"name": "string"}
      },
      {
        "name": "children",
        "required": false,
        "description": "",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "download",
        "required": false,
        "description": "Whether the link should be used to download the content of the href.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "openInNewTab",
        "required": false,
        "description": "Whether the url should be opened in a new tab",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "onClick",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => void",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onMouseDown",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => mixed",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "mixed"}
          }
        }
      },
      {
        "name": "onMouseUp",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => mixed",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "mixed"}
          }
        }
      },
      {
        "name": "disableSpaHijack",
        "required": false,
        "description": "our single page app routing (called spaMixin) hijacks all clicks on\nanchor tags. You might not want this, most often for switching between\napplications (you want a full page reload). Set this to true to disable that\nbehavior.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "AnchorIconButton": {
    "brandStatus": "V2",
    "category": "Interaction",
    "description": "Our current icon list can be accessed from our [Icon Guidelines](/design/guidelines/iconography).",
    "name": "AnchorIconButton",
    "shortDescription": "An exact replica of IconButton but meant specifically for links.",
    "status": "Stable",
    "componentPath": "button/AnchorIconButton",
    "repoFilePath": "webpack/assets/javascripts/latitude/button/AnchorIconButton.jsx",
    "props": [
      {
        "name": "iconName",
        "required": true,
        "description": "The name of the icon meant to be used as the primary button label or meant to be placed next to the label text.",
        "type": {"name": "IconNames"}
      },
      {
        "name": "iconAlignment",
        "required": false,
        "description": "The position of the icon relative to the text.",
        "type": {
          "name": "union",
          "raw": "\"left\" | \"right\"",
          "elements": [
            {"name": "literal", "value": "\"left\""},
            {"name": "literal", "value": "\"right\""}
          ]
        },
        "defaultValue": "\"left\""
      },
      {
        "name": "label",
        "required": false,
        "description": "The text that should appear next to the icon.",
        "type": {"name": "string"}
      },
      {
        "name": "intent",
        "required": false,
        "description": "Three main intents are used in our UI; intents are styles that convey meaning and reinforce the action.",
        "type": {
          "name": "union",
          "raw": "\"basic\" | \"none\" | \"danger\"",
          "elements": [
            {"name": "literal", "value": "\"basic\""},
            {"name": "literal", "value": "\"none\""},
            {"name": "literal", "value": "\"danger\""}
          ]
        },
        "defaultValue": "\"none\""
      },
      {
        "name": "size",
        "required": false,
        "description": "Defines the height of the button. Button sizes correspond to the main form sizes.",
        "type": {
          "name": "union",
          "raw": "\"s\" | \"m\" | \"l\"",
          "elements": [
            {"name": "literal", "value": "\"s\""},
            {"name": "literal", "value": "\"m\""},
            {"name": "literal", "value": "\"l\""}
          ]
        },
        "defaultValue": "\"m\""
      },
      {
        "name": "kind",
        "required": false,
        "description": "Hollow buttons have padding and border, bare has padding but no border, and blank has neither padding nor border",
        "type": {
          "name": "union",
          "raw": "\"solid\" | \"bare\" | \"hollow\" | \"blank\"",
          "elements": [
            {"name": "literal", "value": "\"solid\""},
            {"name": "literal", "value": "\"bare\""},
            {"name": "literal", "value": "\"hollow\""},
            {"name": "literal", "value": "\"blank\""}
          ]
        },
        "defaultValue": "\"hollow\""
      },
      {
        "name": "width",
        "required": false,
        "description": "Buttons should generally use auto width (\"responsive\"). Fixed widths are good for multiple buttons in a row. Full width buttons work great for tables.",
        "type": {
          "name": "union",
          "raw": "\"responsive\" | \"full\"",
          "elements": [
            {"name": "literal", "value": "\"responsive\""},
            {"name": "literal", "value": "\"full\""}
          ]
        },
        "defaultValue": "\"responsive\""
      },
      {
        "name": "disabled",
        "required": false,
        "description": "Give the button the disabled attribute, drop it's opacity, and remove pointer-events.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "href",
        "required": false,
        "description": "Path to be linked.",
        "type": {"name": "string"}
      },
      {
        "name": "download",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "onMouseDown",
        "required": false,
        "description": "Function invoked when mouse down is triggered",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => mixed",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "mixed"}
          }
        }
      },
      {
        "name": "onMouseUp",
        "required": false,
        "description": "Function invoked when mouse up is triggered",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => mixed",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "mixed"}
          }
        }
      },
      {
        "name": "onClick",
        "required": false,
        "description": "Function invoked when button action is triggered",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => mixed",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "mixed"}
          }
        }
      },
      {
        "name": "openInNewTab",
        "required": false,
        "description": "Applies target=\"_blank\" so the link opens in a new tab",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "disableSpaHijack",
        "required": false,
        "description": "our single page app routing (called spaMixin) hijacks all clicks on\nanchor tags. You might not want this, most often for switching between\napplications (you want a full page reload). Set this to true to disable that\nbehavior.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "Button": {
    "brandStatus": "V2",
    "category": "Interaction",
    "description": "",
    "name": "Button",
    "shortDescription": "Buttons represent actions that trigger states, launch new UI, or link the user to new locations.",
    "status": "Stable",
    "componentPath": "button/Button",
    "repoFilePath": "webpack/assets/javascripts/latitude/button/Button.jsx",
    "props": [
      {
        "name": "label",
        "required": false,
        "description": "The text that represents the primary action of the button.",
        "type": {"name": "string"}
      },
      {
        "name": "intent",
        "required": false,
        "description": "We skew toward only using specifying an intent when there is a direct correlation to the primary action. Intents convey meaning and reinforce importance.",
        "type": {
          "name": "union",
          "raw": "\"basic\" | \"danger\" | \"none\"",
          "elements": [
            {"name": "literal", "value": "\"basic\""},
            {"name": "literal", "value": "\"danger\""},
            {"name": "literal", "value": "\"none\""}
          ]
        },
        "defaultValue": "\"none\""
      },
      {
        "name": "kind",
        "required": false,
        "description": "Solid buttons usually constitute a primary action and hollow buttons are generally secondary. Bare buttons can be used for rows of buttons or for more subtle buttons.",
        "type": {
          "name": "union",
          "raw": "\"solid\" | \"hollow\" | \"bare\" | \"blank\"",
          "elements": [
            {"name": "literal", "value": "\"solid\""},
            {"name": "literal", "value": "\"hollow\""},
            {"name": "literal", "value": "\"bare\""},
            {"name": "literal", "value": "\"blank\""}
          ]
        },
        "defaultValue": "\"hollow\""
      },
      {
        "name": "isLoading",
        "required": false,
        "description": "whether the icon is loading or not. Remember to set the loading state to none after loading is complete",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "size",
        "required": false,
        "description": "Defines the height of the button. Button sizes correspond to the main form sizes.",
        "type": {
          "name": "union",
          "raw": "\"s\" | \"m\" | \"l\"",
          "elements": [
            {"name": "literal", "value": "\"s\""},
            {"name": "literal", "value": "\"m\""},
            {"name": "literal", "value": "\"l\""}
          ]
        },
        "defaultValue": "\"m\""
      },
      {
        "name": "width",
        "required": false,
        "description": "Buttons should generally use auto width (\"responsive\"). Fixed widths are good for multiple buttons in a row. Full width buttons work great for tables.",
        "type": {
          "name": "union",
          "raw": "\"responsive\" | \"full\"",
          "elements": [
            {"name": "literal", "value": "\"responsive\""},
            {"name": "literal", "value": "\"full\""}
          ]
        },
        "defaultValue": "\"responsive\""
      },
      {
        "name": "disabled",
        "required": false,
        "description": "Give the button the disabled attribute, drop its opacity, and remove pointer-events.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "children",
        "required": false,
        "description": "",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "onClick",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => mixed",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "mixed"}
          }
        }
      },
      {
        "name": "onMouseDown",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => mixed",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "mixed"}
          }
        }
      },
      {
        "name": "onMouseUp",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => mixed",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "mixed"}
          }
        }
      },
      {
        "name": "type",
        "required": false,
        "description": "type=\"button\" is the default type and has no inherent behavior.\ntype=\"reset\" will reset the form if the button is meant to be a reset button.\ntype=\"submit\" will submit the form when used as a submission button.\ntype=\"menu\" will tell the browser that the button is meant to trigger a menu popup.",
        "type": {
          "name": "union",
          "raw": "\"button\" | \"submit\" | \"reset\" | \"menu\"",
          "elements": [
            {"name": "literal", "value": "\"button\""},
            {"name": "literal", "value": "\"submit\""},
            {"name": "literal", "value": "\"reset\""},
            {"name": "literal", "value": "\"menu\""}
          ]
        },
        "defaultValue": "\"button\""
      }
    ]
  },
  "IconButton": {
    "brandStatus": "V2",
    "category": "Interaction",
    "description": "Our current icon list can be accessed from our [Icon Guidelines](/design/guidelines/iconography).",
    "name": "IconButton",
    "shortDescription": "IconButton art-directs the usage of icons and text inside a button.",
    "status": "In Review",
    "componentPath": "button/IconButton",
    "repoFilePath": "webpack/assets/javascripts/latitude/button/IconButton.jsx",
    "props": [
      {
        "name": "iconName",
        "required": true,
        "description": "The name of the icon meant to be used as the primary button label or meant to be placed next to the label text.",
        "type": {"name": "IconNames"}
      },
      {
        "name": "iconAlignment",
        "required": false,
        "description": "The position of the icon relative to the text.",
        "type": {
          "name": "union",
          "raw": "\"left\" | \"right\"",
          "elements": [
            {"name": "literal", "value": "\"left\""},
            {"name": "literal", "value": "\"right\""}
          ]
        },
        "defaultValue": "\"left\""
      },
      {
        "name": "label",
        "required": false,
        "description": "The text that should appear next to the icon.",
        "type": {"name": "string"}
      },
      {
        "name": "type",
        "required": true,
        "description": "type=\"button\" is the default type and has no inherent behavior.\ntype=\"reset\" will reset the form if the button is meant to be a reset button.\ntype=\"submit\" will submit the form when used as a submission button.\ntype=\"menu\" will tell the browser that the button is meant to trigger a menu popup.",
        "type": {
          "name": "union",
          "raw": "\"button\" | \"submit\" | \"reset\" | \"menu\"",
          "elements": [
            {"name": "literal", "value": "\"button\""},
            {"name": "literal", "value": "\"submit\""},
            {"name": "literal", "value": "\"reset\""},
            {"name": "literal", "value": "\"menu\""}
          ]
        }
      },
      {
        "name": "intent",
        "required": false,
        "description": "Three main intents are used in our UI; intents are styles that convey meaning and reinforce the action.",
        "type": {
          "name": "union",
          "raw": "\"basic\" | \"none\" | \"danger\"",
          "elements": [
            {"name": "literal", "value": "\"basic\""},
            {"name": "literal", "value": "\"none\""},
            {"name": "literal", "value": "\"danger\""}
          ]
        },
        "defaultValue": "\"none\""
      },
      {
        "name": "size",
        "required": false,
        "description": "Defines the height of the button. Button sizes correspond to the main form sizes.",
        "type": {"name": "ButtonSize"},
        "defaultValue": "\"m\""
      },
      {
        "name": "kind",
        "required": false,
        "description": "Solid buttons usually constitute a primary action; hollow buttons are generally secondary. Bare buttons can be used for icon buttons with no text or AnchorButtons.",
        "type": {
          "name": "union",
          "raw": "\"hollow\" | \"bare\" | \"blank\"",
          "elements": [
            {"name": "literal", "value": "\"hollow\""},
            {"name": "literal", "value": "\"bare\""},
            {"name": "literal", "value": "\"blank\""}
          ]
        },
        "defaultValue": "\"hollow\""
      },
      {
        "name": "isLoading",
        "required": false,
        "description": "whether the icon is loading or not. Remember to set the loading state to none after loading is complete",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "width",
        "required": false,
        "description": "Buttons should generally use auto width (\"responsive\"). Fixed widths are good for multiple buttons in a row. Full width buttons work great for tables.",
        "type": {
          "name": "union",
          "raw": "\"responsive\" | \"full\"",
          "elements": [
            {"name": "literal", "value": "\"responsive\""},
            {"name": "literal", "value": "\"full\""}
          ]
        },
        "defaultValue": "\"responsive\""
      },
      {
        "name": "height",
        "required": false,
        "description": "Buttons should generally use fixed height (\"fixed\"). Full heights are for filling the wrapping container vertically. Wrap in a <div> with a height.",
        "type": {
          "name": "union",
          "raw": "{type: \"fixed\"} | {type: \"customDontUse\", height: number}",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{type: \"fixed\"}",
              "signature": {
                "properties": [
                  {
                    "key": "type",
                    "value": {
                      "name": "literal",
                      "value": "\"fixed\"",
                      "required": true
                    }
                  }
                ]
              }
            },
            {
              "name": "signature",
              "type": "object",
              "raw": "{type: \"customDontUse\", height: number}",
              "signature": {
                "properties": [
                  {
                    "key": "type",
                    "value": {
                      "name": "literal",
                      "value": "\"customDontUse\"",
                      "required": true
                    }
                  },
                  {
                    "key": "height",
                    "value": {"name": "number", "required": true}
                  }
                ]
              }
            }
          ]
        },
        "defaultValue": "{type: \"fixed\"}"
      },
      {
        "name": "disabled",
        "required": false,
        "description": "Give the button the disabled attribute, drop it's opacity, and remove pointer-events.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "onClick",
        "required": false,
        "description": "Function invoked when the button is clicked.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => mixed",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "mixed"}
          }
        }
      },
      {
        "name": "onFocus",
        "required": false,
        "description": "Function invoked when the button is focused",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => void",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "Function invoked when the button is blurred",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => void",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onMouseDown",
        "required": false,
        "description": "Function invoked when mouse down is triggered",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => mixed",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "mixed"}
          }
        }
      },
      {
        "name": "onMouseUp",
        "required": false,
        "description": "Function invoked when mouse up is triggered",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(event: Event) => mixed",
          "signature": {
            "arguments": [{"name": "event", "type": {"name": "Event"}}],
            "return": {"name": "mixed"}
          }
        }
      },
      {
        "name": "deprecatedAllowColorInheritance",
        "required": false,
        "description": "Pre-css-in-js world icons could willy nilly inherit color from many sources. This is bad and we want to avoid at all costs. This prop defaults to retaining the old behavior.",
        "type": {"name": "boolean"}
      }
    ]
  },
  "CalendarDateInput": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "componenentGroup": "Date and Time",
    "description": "CalendarDateInput wraps the [react-datepicker](https://github.com/Hacker0x01/react-datepicker) library from HackerOne for displaying a visual calendar, but text input processing is done using the Flexport `<TextInput>` component. \n\n Under the hood, it uses moment to parse and format dates. However, CalendarDateInput uses a CalendarDateType in the API, as opposed to a moment object. Moment objects have extra information in them, which leads to ambiguity. For instance, what timezone should be used when decided what \"day\" a moment object is? Instead, CalendarDateInput forces the implementor to thoughtfully convert moment objects into text strings, using the momentToCalendarDate() method in CalendarDateType.",
    "name": "CalendarDateInput",
    "shortDescription": "CalendarDateInput is a visual calendar and text input for collecting a date from the user.",
    "status": "Stable",
    "componentPath": "date/CalendarDateInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/date/CalendarDateInput.jsx",
    "props": [
      {
        "name": "disabled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "size",
        "required": false,
        "description": "",
        "type": {"name": "Size"},
        "defaultValue": "\"m\""
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isPrefilled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "placeholder",
        "required": false,
        "description": "",
        "type": {"name": "string"}
      },
      {
        "name": "dateFormatString",
        "required": false,
        "description": "The date format string that is used to display a date to the use.\nThis should be a moment format string, like \"MM-DD-YYYY\".\nThis date format string will also be added to the moment suite of parser strings for parsing user input.",
        "type": {"name": "string"},
        "defaultValue": "\"MMM D, YYYY\""
      },
      {
        "name": "minDate",
        "required": false,
        "description": "The minimum date that the user is allowed to view on the calendar. The month navigation will prevent navigating to months outside this range.",
        "type": {
          "name": "union",
          "raw": "CalendarDate | null",
          "elements": [{"name": "CalendarDate"}, {"name": "null"}]
        },
        "defaultValue": "null"
      },
      {
        "name": "maxDate",
        "required": false,
        "description": "The maximum date that the user is allowed to view on the calendar. The month navigation will prevent navigating to months outside this range.",
        "type": {
          "name": "union",
          "raw": "CalendarDate | null",
          "elements": [{"name": "CalendarDate"}, {"name": "null"}]
        },
        "defaultValue": "null"
      },
      {
        "name": "filterDate",
        "required": false,
        "description": "If minDate and maxDate aren't enough, filterDate can be used to arbitarily filter dates (i.e. no weekends).",
        "type": {
          "name": "union",
          "raw": "(CalendarDate => boolean) | null",
          "elements": [
            {
              "name": "signature",
              "type": "function",
              "raw": "CalendarDate => boolean",
              "signature": {
                "arguments": [{"name": "", "type": {"name": "CalendarDate"}}],
                "return": {"name": "boolean"}
              }
            },
            {"name": "null"}
          ]
        },
        "defaultValue": "null"
      },
      {
        "name": "inputRef",
        "required": false,
        "description": "Access to the underlying input field.",
        "type": {
          "name": "union",
          "raw": "((HTMLElement | null) => void) | null",
          "elements": [
            {
              "name": "signature",
              "type": "function",
              "raw": "(HTMLElement | null) => void",
              "signature": {
                "arguments": [
                  {
                    "name": "",
                    "type": {
                      "name": "union",
                      "raw": "HTMLElement | null",
                      "elements": [{"name": "HTMLElement"}, {"name": "null"}]
                    }
                  }
                ],
                "return": {"name": "void"}
              }
            },
            {"name": "null"}
          ]
        },
        "defaultValue": "null"
      },
      {
        "name": "value",
        "required": true,
        "description": "The value of CalendarDateInput is a CalendarDate type. Check out CalendarDateType.js to learn more about this format.",
        "type": {
          "name": "union",
          "raw": "CalendarDate | null",
          "elements": [{"name": "CalendarDate"}, {"name": "null"}]
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(CalendarDate | null) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "CalendarDate | null",
                  "elements": [{"name": "CalendarDate"}, {"name": "null"}]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "showIcon",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "dateToShow",
        "required": false,
        "description": "",
        "type": {
          "name": "union",
          "raw": "CalendarDate | null",
          "elements": [{"name": "CalendarDate"}, {"name": "null"}]
        }
      },
      {
        "name": "noPortal",
        "required": false,
        "description": "",
        "type": {"name": "boolean"}
      },
      {
        "name": "showWeekNumbers",
        "required": false,
        "description": "Display the week number next to each week",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "CalendarDateRange": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "componenentGroup": "Date and Time",
    "description": "",
    "name": "CalendarDateRange",
    "shortDescription": "A date range input, with an optional dropdown button that has presets for the calendar date range.",
    "status": "Stable",
    "componentPath": "date/CalendarDateRange",
    "repoFilePath": "webpack/assets/javascripts/latitude/date/CalendarDateRange.jsx",
    "props": [
      {
        "name": "value",
        "required": true,
        "description": "a CalendarDateRangeValue is a combination of two CalendarDates that are nullable",
        "type": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  +startDate: CalendarDate | null,\n  +endDate: CalendarDate | null,\n}",
          "signature": {
            "properties": [
              {
                "key": "startDate",
                "value": {
                  "name": "union",
                  "raw": "CalendarDate | null",
                  "elements": [{"name": "CalendarDate"}, {"name": "null"}],
                  "required": true
                }
              },
              {
                "key": "endDate",
                "value": {
                  "name": "union",
                  "raw": "CalendarDate | null",
                  "elements": [{"name": "CalendarDate"}, {"name": "null"}],
                  "required": true
                }
              }
            ]
          }
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "CalendarDateRangeValue => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{\n  +startDate: CalendarDate | null,\n  +endDate: CalendarDate | null,\n}",
                  "signature": {
                    "properties": [
                      {
                        "key": "startDate",
                        "value": {
                          "name": "union",
                          "raw": "CalendarDate | null",
                          "elements": [
                            {"name": "CalendarDate"},
                            {"name": "null"}
                          ],
                          "required": true
                        }
                      },
                      {
                        "key": "endDate",
                        "value": {
                          "name": "union",
                          "raw": "CalendarDate | null",
                          "elements": [
                            {"name": "CalendarDate"},
                            {"name": "null"}
                          ],
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "this is only here for type-safety, and has no actual effect",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        },
        "defaultValue": "() => {}"
      },
      {
        "name": "presets",
        "required": true,
        "description": "you can provide a list of preset options, such as \"Last week\", that will prepopulate the fields. Provide an ordered ist of CalendarDateRangePreset, defined in this component, and the presets will be provided.",
        "type": {
          "name": "union",
          "raw": "Array<CalendarDateRangePreset> | null",
          "elements": [
            {
              "name": "Array",
              "elements": [
                {
                  "name": "signature",
                  "type": "object",
                  "raw": "{\n  +value: {\n    +startDate: CalendarDate | null,\n    +endDate: CalendarDate | null,\n  },\n  +label: string,\n}",
                  "signature": {
                    "properties": [
                      {
                        "key": "value",
                        "value": {
                          "name": "signature",
                          "type": "object",
                          "raw": "{\n  +startDate: CalendarDate | null,\n  +endDate: CalendarDate | null,\n}",
                          "signature": {
                            "properties": [
                              {
                                "key": "startDate",
                                "value": {
                                  "name": "union",
                                  "raw": "CalendarDate | null",
                                  "elements": [
                                    {"name": "CalendarDate"},
                                    {"name": "null"}
                                  ],
                                  "required": true
                                }
                              },
                              {
                                "key": "endDate",
                                "value": {
                                  "name": "union",
                                  "raw": "CalendarDate | null",
                                  "elements": [
                                    {"name": "CalendarDate"},
                                    {"name": "null"}
                                  ],
                                  "required": true
                                }
                              }
                            ]
                          },
                          "required": true
                        }
                      },
                      {
                        "key": "label",
                        "value": {"name": "string", "required": true}
                      }
                    ]
                  }
                }
              ],
              "raw": "Array<CalendarDateRangePreset>"
            },
            {"name": "null"}
          ]
        }
      },
      {
        "name": "minDate",
        "required": false,
        "description": "blocks calendar off prior to this date",
        "type": {
          "name": "union",
          "raw": "CalendarDate | null",
          "elements": [{"name": "CalendarDate"}, {"name": "null"}]
        },
        "defaultValue": "null"
      },
      {
        "name": "maxDate",
        "required": false,
        "description": "blocks calendar off after this date",
        "type": {
          "name": "union",
          "raw": "CalendarDate | null",
          "elements": [{"name": "CalendarDate"}, {"name": "null"}]
        },
        "defaultValue": "null"
      },
      {
        "name": "size",
        "required": false,
        "description": "",
        "type": {"name": "Size"},
        "defaultValue": "\"m\""
      },
      {
        "name": "disabled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isStartDateInvalid",
        "required": false,
        "description": "controls the red outline of the start date field",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isEndDateInvalid",
        "required": false,
        "description": "controls the red outline of the end date field",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "controls the red outline of the two date fields",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "DateTimeInput": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "componenentGroup": "Date and Time",
    "description": "This component combines a CalendarDateInput with a TimeInput, allowing the user to set both. \n\n This component allows the user to input a date and time separately and in any order, hence a date time value can have either value be null. \n\n You can convert the DateTimeValue with the exported method `momentFromCalDateWallTime` from wallTime.js.",
    "name": "DateTimeInput",
    "shortDescription": "An input for date AND time.",
    "status": "Stable",
    "componentPath": "date/DateTimeInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/date/DateTimeInput.jsx",
    "props": [
      {
        "name": "disabled",
        "required": false,
        "description": "from TextInput",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "size",
        "required": false,
        "description": "",
        "type": {"name": "Size"},
        "defaultValue": "\"m\""
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isPrefilled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "dateFormatString",
        "required": false,
        "description": "how the date will be displayed on the CalendarDateInput",
        "type": {"name": "string"},
        "defaultValue": "\"MMM D, YYYY\""
      },
      {
        "name": "minDate",
        "required": false,
        "description": "",
        "type": {
          "name": "union",
          "raw": "CalendarDate | null",
          "elements": [{"name": "CalendarDate"}, {"name": "null"}]
        },
        "defaultValue": "null"
      },
      {
        "name": "maxDate",
        "required": false,
        "description": "",
        "type": {
          "name": "union",
          "raw": "CalendarDate | null",
          "elements": [{"name": "CalendarDate"}, {"name": "null"}]
        },
        "defaultValue": "null"
      },
      {
        "name": "filterDate",
        "required": false,
        "description": "used to filter calendar dates, like 'no mondays'",
        "type": {
          "name": "union",
          "raw": "(CalendarDate => boolean) | null",
          "elements": [
            {
              "name": "signature",
              "type": "function",
              "raw": "CalendarDate => boolean",
              "signature": {
                "arguments": [{"name": "", "type": {"name": "CalendarDate"}}],
                "return": {"name": "boolean"}
              }
            },
            {"name": "null"}
          ]
        },
        "defaultValue": "null"
      },
      {
        "name": "timeInputOptions",
        "required": false,
        "description": "the list of preset options to display on the time input",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "WallTime"}],
          "raw": "$ReadOnlyArray<WallTime>"
        },
        "defaultValue": "getTimeIntervals(ZERO_OCLOCK, EOD_OCLOCK, 30)"
      },
      {
        "name": "timeZone",
        "required": true,
        "description": "displayed next to the date and time inputs.",
        "type": {"name": "string"}
      },
      {
        "name": "value",
        "required": true,
        "description": "a date time value, defined in this component, is a CalendarDate and a WallTime, either one is optional.",
        "type": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  calendarDate: CalendarDate | null,\n  wallTime: WallTime | null,\n}",
          "signature": {
            "properties": [
              {
                "key": "calendarDate",
                "value": {
                  "name": "union",
                  "raw": "CalendarDate | null",
                  "elements": [{"name": "CalendarDate"}, {"name": "null"}],
                  "required": true
                }
              },
              {
                "key": "wallTime",
                "value": {
                  "name": "union",
                  "raw": "WallTime | null",
                  "elements": [{"name": "WallTime"}, {"name": "null"}],
                  "required": true
                }
              }
            ]
          }
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "DateTimeValue => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{\n  calendarDate: CalendarDate | null,\n  wallTime: WallTime | null,\n}",
                  "signature": {
                    "properties": [
                      {
                        "key": "calendarDate",
                        "value": {
                          "name": "union",
                          "raw": "CalendarDate | null",
                          "elements": [
                            {"name": "CalendarDate"},
                            {"name": "null"}
                          ],
                          "required": true
                        }
                      },
                      {
                        "key": "wallTime",
                        "value": {
                          "name": "union",
                          "raw": "WallTime | null",
                          "elements": [{"name": "WallTime"}, {"name": "null"}],
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "extraIgnoreReactOnclickoutsideClass",
        "required": false,
        "description": "",
        "type": {"name": "string"},
        "defaultValue": "\"\""
      }
    ]
  },
  "TimeInput": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "componenentGroup": "Date and Time",
    "description": "",
    "name": "TimeInput",
    "shortDescription": "A simple time chooser that supports precreated times as well as arbitrary user input.",
    "status": "Stable",
    "componentPath": "date/TimeInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/date/TimeInput.jsx",
    "props": [
      {
        "name": "militaryTime",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "options",
        "required": true,
        "description": "",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "WallTime"}],
          "raw": "$ReadOnlyArray<WallTime>"
        }
      },
      {
        "name": "disabled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"}
      },
      {
        "name": "size",
        "required": false,
        "description": "",
        "type": {"name": "Size"}
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "",
        "type": {"name": "boolean"}
      },
      {
        "name": "isPrefilled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "placeholder",
        "required": false,
        "description": "",
        "type": {"name": "string"},
        "defaultValue": "\"-- : --  --\""
      },
      {
        "name": "inputRef",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(HTMLElement | null) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "HTMLElement | null",
                  "elements": [{"name": "HTMLElement"}, {"name": "null"}]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onClick",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onFocus",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onKeyDown",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "KeyboardEvent => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "KeyboardEvent"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "value",
        "required": true,
        "description": "",
        "type": {
          "name": "union",
          "raw": "WallTime | null",
          "elements": [{"name": "WallTime"}, {"name": "null"}]
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(WallTime | null) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "WallTime | null",
                  "elements": [{"name": "WallTime"}, {"name": "null"}]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "textAlign",
        "required": false,
        "description": "",
        "type": {
          "name": "union",
          "raw": "\"left\" | \"right\" | \"center\"",
          "elements": [
            {"name": "literal", "value": "\"left\""},
            {"name": "literal", "value": "\"right\""},
            {"name": "literal", "value": "\"center\""}
          ]
        },
        "defaultValue": "\"left\""
      },
      {
        "name": "extraIgnoreReactOnclickoutsideClass",
        "required": false,
        "description": "",
        "type": {"name": "string"},
        "defaultValue": "\"\""
      },
      {
        "name": "noPortal",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "DocumentTabs": {
    "brandStatus": "V2",
    "category": "Documents",
    "description": "",
    "name": "DocumentTabs",
    "shortDescription": "A tab header for managing multiple documents",
    "status": "Beta",
    "componentPath": "document/DocumentTabs/DocumentTabs",
    "repoFilePath": "webpack/assets/javascripts/latitude/document/DocumentTabs/DocumentTabs.jsx",
    "props": [
      {
        "name": "documentNameOptions",
        "required": true,
        "description": "A list of document names to be displayed.",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{+key: number, +name: string}",
              "signature": {
                "properties": [
                  {"key": "key", "value": {"name": "number", "required": true}},
                  {"key": "name", "value": {"name": "string", "required": true}}
                ]
              }
            }
          ],
          "raw": "$ReadOnlyArray<{+key: number, +name: string}>"
        }
      },
      {
        "name": "selectedKey",
        "required": true,
        "description": "The key of the currently selected document.",
        "type": {"name": "number"}
      },
      {
        "name": "onAdd",
        "required": true,
        "description": "A callback called when the add button is pressed.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "onSelect",
        "required": true,
        "description": "A callback called when a tab is selected.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(key: number) => void",
          "signature": {
            "arguments": [{"name": "key", "type": {"name": "number"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onDelete",
        "required": true,
        "description": "A callback called when a document is deleted.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(key: number) => void",
          "signature": {
            "arguments": [{"name": "key", "type": {"name": "number"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "size",
        "required": false,
        "description": "The size of document tabs.",
        "type": {"name": "Size"},
        "defaultValue": "\"m\""
      }
    ]
  },
  "DocumentUploader": {
    "brandStatus": "V2",
    "category": "Documents",
    "description": "The document uploader provides a `File` object to the `onChange` handler when a user drops a file or selects a file from the file picker. This is a controlled component, so it is the responsibility of the caller to set the `document` prop to the `File` returned from `onChange`. It is also the responsibility of the caller to notify the component about the upload status of the document through the `serverState` prop. Changing this prop will show appropriate toast notifications to the user.",
    "name": "DocumentUploader",
    "shortDescription": "Controlled component for uploading and previewing PDF documents",
    "status": "Beta",
    "componentPath": "document/DocumentUploader",
    "repoFilePath": "webpack/assets/javascripts/latitude/document/DocumentUploader.jsx",
    "props": [
      {
        "name": "document",
        "required": true,
        "description": "If null, show the upload screen, otherwise show the document preview",
        "type": {"name": "File", "nullable": true}
      },
      {
        "name": "onChange",
        "required": true,
        "description": "Called when a document is dropped on the upload screen, or when a document is deleted",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(?File) => void",
          "signature": {
            "arguments": [
              {"name": "", "type": {"name": "File", "nullable": true}}
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "serverState",
        "required": true,
        "description": "Controls the toast notifications around uploading and deleting files",
        "type": {
          "name": "union",
          "raw": "\"waiting\" | \"uploading\" | \"deleting\" | \"error\"",
          "elements": [
            {"name": "literal", "value": "\"waiting\""},
            {"name": "literal", "value": "\"uploading\""},
            {"name": "literal", "value": "\"deleting\""},
            {"name": "literal", "value": "\"error\""}
          ]
        }
      },
      {
        "name": "onNoFileAvailableUpdate",
        "required": false,
        "description": "Called when the user flags that they have no file to upload",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "boolean => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "boolean"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "noFileAvailable",
        "required": false,
        "description": "Flag for whether or not the user has a file to upload",
        "type": {"name": "boolean"}
      },
      {
        "name": "canDeleteDocument",
        "required": false,
        "description": "Flag for whether or not user can delete the file",
        "type": {"name": "boolean"}
      }
    ]
  },
  "FileUploader": {
    "brandStatus": "V3",
    "category": "Documents",
    "description": "The fileUploader provides a list of `Attachment` objects to `onChange` handler when a user uploads files. This component wraps an `Attachment` object around each `File` object that is uploaded. It also renders thumbnail preview, document type selector and description selector for each file. Consumer is responsible for setting `attachments` prop to the list of `Attachments` objects returned from `onChange`.",
    "name": "FileUploader",
    "shortDescription": "Uncontrolled component for bulk uploading and previewing files",
    "status": "Beta",
    "componentPath": "document/FileUploader",
    "repoFilePath": "webpack/assets/javascripts/latitude/document/FileUploader.jsx",
    "props": [
      {
        "name": "attachments",
        "required": false,
        "description": "List of files uploaded",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "AttachmentType"}],
          "raw": "$ReadOnlyArray<AttachmentType>"
        },
        "defaultValue": "[]"
      },
      {
        "name": "showDropzone",
        "required": false,
        "description": "Displays a Dropzone around the FileUploader Button",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "showDescriptionEditor",
        "required": false,
        "description": "Displays description editor for each file",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "showPreview",
        "required": false,
        "description": "Displays thumbnail preview for uploaded files\nCurrently, preview for IMAGE and PDF formats are supported",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "singleFileUpload",
        "required": false,
        "description": "FileUploader saves only 1 file (the latest) from uploaded files",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "fileNameEditable",
        "required": false,
        "description": "Allows user to edit file names",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "documentTypeList",
        "required": true,
        "description": "This list populates the document type selector for each file.\nWhen documentTypeList contains only 1 option, it is set as the default document\ntype for files and document type selector will not be displayed.",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{+name: string, +value: string}",
              "signature": {
                "properties": [
                  {
                    "key": "name",
                    "value": {"name": "string", "required": true}
                  },
                  {
                    "key": "value",
                    "value": {"name": "string", "required": true}
                  }
                ]
              }
            }
          ],
          "raw": "$ReadOnlyArray<{+name: string, +value: string}>"
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "Called when files are uploaded from the dropzone or the file selector",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "($ReadOnlyArray<AttachmentType>) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "$ReadOnlyArray",
                  "elements": [{"name": "AttachmentType"}],
                  "raw": "$ReadOnlyArray<AttachmentType>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "disabled",
        "required": false,
        "description": "whether the uploader is disabled or not",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "PdfViewer": {
    "brandStatus": "V2",
    "category": "Documents",
    "description": "This component uses the browser's native PDF renderer by opening the PDF in an `iframe`.",
    "name": "PdfViewer",
    "shortDescription": "Previews PDF documents from `File` objects or URLs",
    "status": "Beta",
    "componentPath": "document/PdfViewer",
    "repoFilePath": "webpack/assets/javascripts/latitude/document/PdfViewer.jsx",
    "props": [
      {
        "name": "pdf",
        "required": true,
        "description": "",
        "type": {
          "name": "union",
          "raw": "File | string",
          "elements": [{"name": "File"}, {"name": "string"}]
        }
      }
    ]
  },
  "ComponentBoundary": {
    "brandStatus": "V2",
    "category": "Error Boundary",
    "description": "If you need to cover an entire page, think about using FullPageBoundary instead. Check out the higher order component `errorBoundary.jsx` to learn more about how this component works.",
    "name": "ComponentBoundary",
    "shortDescription": "Use ComponentBoundary to stop the propogation of React errors past in page smaller components.",
    "status": "Stable",
    "componentPath": "error/ComponentBoundary",
    "repoFilePath": "webpack/assets/javascripts/latitude/error/ComponentBoundary.jsx",
    "props": [
      {
        "name": "errorState",
        "required": true,
        "description": "$Hide(provided by higher order component)",
        "type": {"name": "BoundaryError"}
      },
      {
        "name": "resetErrorState",
        "required": true,
        "description": "$Hide(provided by higher order component)",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "showRetry",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      }
    ]
  },
  "FullPageBoundaryInner": {
    "brandStatus": "V2",
    "category": "Error Boundary",
    "description": "If you need to cover a smaller component, think about using ComponentBoundary instead. Check out the higher order component `errorBoundary.jsx` to learn more about how this component works.",
    "name": "FullPageBoundaryInner",
    "shortDescription": "Use FullPageBoundary to stop the propogation of React errors past a large, full page component.",
    "status": "Stable",
    "componentPath": "error/FullPageBoundary",
    "repoFilePath": "webpack/assets/javascripts/latitude/error/FullPageBoundary.jsx",
    "props": [
      {
        "name": "errorState",
        "required": true,
        "description": "If the error boundary is rendered, there is an error that caused it. This is that error.",
        "type": {"name": "BoundaryError"}
      },
      {
        "name": "resetErrorState",
        "required": true,
        "description": "If your error boundary component has a \"try again\" button, you'll need to clear the current error.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      }
    ]
  },
  "NullErrorBoundary": {
    "brandStatus": "V2",
    "category": "Error Boundary",
    "description": "A reasonable behavior for very small decorative components like Icon is to display null if they fail, and enable the error with stack trace to be caught with componentDidCatch.",
    "name": "NullErrorBoundary",
    "shortDescription": "Use NullErrorBoundary to stop the propogation of React errors past a very small component (i.e. Icon).",
    "status": "Stable",
    "componentPath": "error/NullErrorBoundary",
    "repoFilePath": "webpack/assets/javascripts/latitude/error/NullErrorBoundary.jsx",
    "props": [
      {
        "name": "errorState",
        "required": true,
        "description": "",
        "type": {"name": "BoundaryError"}
      },
      {
        "name": "resetErrorState",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      }
    ]
  },
  "BaseFilter": {
    "brandStatus": "V2",
    "category": "Filter",
    "description": "BaseFilter serves as a skeleton than can be extended to create custom filters with. BaseFilter controls the presentation of the filter button and the filter dropdown. If you build a custom filter, consider contributing your filter to Latitude so it can be used by others. See [Latitude contribution guidelines for more details](/components/contributing)",
    "name": "BaseFilter",
    "shortDescription": "A presentational skeleton for filters that can be used to build Custom Filters",
    "status": "Stable",
    "componentPath": "filter/BaseFilter",
    "repoFilePath": "webpack/assets/javascripts/latitude/filter/BaseFilter.jsx",
    "props": [
      {
        "name": "isActive",
        "required": false,
        "description": "",
        "type": {"name": "void"}
      },
      {
        "name": "onClick",
        "required": false,
        "description": "",
        "type": {"name": "void"}
      },
      {
        "name": "size",
        "required": false,
        "description": "the size of the filter button",
        "type": {"name": "Size"}
      },
      {
        "name": "placement",
        "required": false,
        "description": "controls where the dropdown menu is anchored in relation to the multiselect input",
        "type": {"name": "PopperPlacement"},
        "defaultValue": "\"bottom-start\""
      },
      {
        "name": "children",
        "required": true,
        "description": "The dropdown contents",
        "type": {
          "name": "union",
          "raw": "React.Node | ((closePopup: () => void) => React.Node)",
          "elements": [
            {"name": "ReactNode", "raw": "React.Node"},
            {
              "name": "signature",
              "type": "function",
              "raw": "(closePopup: () => void) => React.Node",
              "signature": {
                "arguments": [
                  {
                    "name": "closePopup",
                    "type": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {"arguments": [], "return": {"name": "void"}}
                    }
                  }
                ],
                "return": {"name": "ReactNode", "raw": "React.Node"}
              }
            }
          ]
        }
      },
      {
        "name": "noPortal",
        "required": false,
        "description": "whether to use a Portal or React Fragment component",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "DateRangeFilter": {
    "brandStatus": "V2",
    "category": "Filter",
    "description": "DateRangeFilter is the filter analog for CalendarDateRange. The API is the approximately the same as CalendarDateRange, but appears in a filter UX. Note: The first preset is the \"default\", and is assumed to be inactive (i.e. \"All dates\").",
    "name": "DateRangeFilter",
    "shortDescription": "DateRangeFilter allows for filtering across date ranges",
    "status": "Stable",
    "componentPath": "filter/DateRangeFilter",
    "repoFilePath": "webpack/assets/javascripts/latitude/filter/DateRangeFilter.jsx",
    "props": [
      {
        "name": "label",
        "required": true,
        "description": "Description of the filter pivot, e.g. `Delivery Date Range`",
        "type": {"name": "string"}
      },
      {
        "name": "value",
        "required": true,
        "description": "The value for a DateRangeFilter is either a custom date range, or a preset date range.\nThe preset data range must match one of the provided presets.",
        "type": {
          "name": "union",
          "raw": "PresetDateFilterValue | CustomDateFilterValue",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n  +type: \"preset\",\n  +label: string,\n  +startDate: CalendarDate,\n  +endDate: CalendarDate,\n|}",
              "signature": {
                "properties": [
                  {
                    "key": "type",
                    "value": {
                      "name": "literal",
                      "value": "\"preset\"",
                      "required": true
                    }
                  },
                  {
                    "key": "label",
                    "value": {"name": "string", "required": true}
                  },
                  {
                    "key": "startDate",
                    "value": {"name": "CalendarDate", "required": true}
                  },
                  {
                    "key": "endDate",
                    "value": {"name": "CalendarDate", "required": true}
                  }
                ]
              }
            },
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n  +type: \"custom\",\n  +startDate: CalendarDate,\n  +endDate: CalendarDate,\n|}",
              "signature": {
                "properties": [
                  {
                    "key": "type",
                    "value": {
                      "name": "literal",
                      "value": "\"custom\"",
                      "required": true
                    }
                  },
                  {
                    "key": "startDate",
                    "value": {"name": "CalendarDate", "required": true}
                  },
                  {
                    "key": "endDate",
                    "value": {"name": "CalendarDate", "required": true}
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "Called when a new date range is selected",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "DateFilterValue => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "PresetDateFilterValue | CustomDateFilterValue",
                  "elements": [
                    {
                      "name": "signature",
                      "type": "object",
                      "raw": "{|\n  +type: \"preset\",\n  +label: string,\n  +startDate: CalendarDate,\n  +endDate: CalendarDate,\n|}",
                      "signature": {
                        "properties": [
                          {
                            "key": "type",
                            "value": {
                              "name": "literal",
                              "value": "\"preset\"",
                              "required": true
                            }
                          },
                          {
                            "key": "label",
                            "value": {"name": "string", "required": true}
                          },
                          {
                            "key": "startDate",
                            "value": {"name": "CalendarDate", "required": true}
                          },
                          {
                            "key": "endDate",
                            "value": {"name": "CalendarDate", "required": true}
                          }
                        ]
                      }
                    },
                    {
                      "name": "signature",
                      "type": "object",
                      "raw": "{|\n  +type: \"custom\",\n  +startDate: CalendarDate,\n  +endDate: CalendarDate,\n|}",
                      "signature": {
                        "properties": [
                          {
                            "key": "type",
                            "value": {
                              "name": "literal",
                              "value": "\"custom\"",
                              "required": true
                            }
                          },
                          {
                            "key": "startDate",
                            "value": {"name": "CalendarDate", "required": true}
                          },
                          {
                            "key": "endDate",
                            "value": {"name": "CalendarDate", "required": true}
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onRemove",
        "required": false,
        "description": "Replaces the downOpen icon with an X button. When this button is pressed,\nonRemove is called",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "shyLabel",
        "required": false,
        "description": "Whether the label hides if there are any options selected",
        "type": {"name": "boolean"}
      },
      {
        "name": "minDate",
        "required": false,
        "description": "Blocks calendar off prior to this date",
        "type": {"name": "CalendarDate"}
      },
      {
        "name": "maxDate",
        "required": false,
        "description": "Blocks calendar off after to this date",
        "type": {"name": "CalendarDate"}
      },
      {
        "name": "presets",
        "required": true,
        "description": "You can provide an ordered list of preset options such as \"Last week\"\nthat will prepopulate the DateDange list.",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n  +label: string,\n  +startDate: CalendarDate,\n  +endDate: CalendarDate,\n|}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {"name": "string", "required": true}
                  },
                  {
                    "key": "startDate",
                    "value": {"name": "CalendarDate", "required": true}
                  },
                  {
                    "key": "endDate",
                    "value": {"name": "CalendarDate", "required": true}
                  }
                ]
              }
            }
          ],
          "raw": "$ReadOnlyArray<{|\n  +label: string,\n  +startDate: CalendarDate,\n  +endDate: CalendarDate,\n|}>"
        }
      },
      {
        "name": "size",
        "required": false,
        "description": "The size of the filter button",
        "type": {"name": "Size"}
      },
      {
        "name": "disabled",
        "required": false,
        "description": "Whether the filter is disabled",
        "type": {"name": "boolean"}
      },
      {
        "name": "dropdownPlacement",
        "required": false,
        "description": "controls where the dropdown menu is anchored in relation to the multiselect input",
        "type": {"name": "PopupPlacement"}
      },
      {
        "name": "noPortal",
        "required": false,
        "description": "whether to use a Portal or React Fragment component",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "MultiselectFilter": {
    "brandStatus": "V2",
    "category": "Filter",
    "description": "MultiselectFilter is the filter analog for MultiselectInput. The API is the same as MultiselectInput, but appears in a filter UX.",
    "name": "MultiselectFilter",
    "shortDescription": "MultiselectFilter allows users to filter by multiple values from a list",
    "status": "Stable",
    "componentPath": "filter/MultiselectFilter",
    "repoFilePath": "webpack/assets/javascripts/latitude/filter/MultiselectFilter.jsx",
    "props": [
      {
        "name": "label",
        "required": true,
        "description": "Description of the filter pivot, e.g. `City`",
        "type": {"name": "string"}
      },
      {
        "name": "value",
        "required": true,
        "description": "The currently selected value",
        "type": {
          "name": "ValueObj",
          "elements": [{"name": "T"}],
          "raw": "ValueObj<T>"
        }
      },
      {
        "name": "options",
        "required": true,
        "description": "The list of options to be picked from",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {"name": "Option", "elements": [{"name": "T"}], "raw": "Option<T>"}
          ],
          "raw": "$ReadOnlyArray<Option<T>>"
        }
      },
      {
        "name": "displaySelectAllButton",
        "required": false,
        "description": "creates a select all checkbox above the options that allows you to select all",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "filterSearchMode",
        "required": false,
        "description": "If `filterSearchMode` is set to `filter`, a text input will be included\nthat will filter down on the visible options",
        "type": {
          "name": "union",
          "raw": "| {|+type: \"none\"|}\n| {|+type: \"filter\", +placeholder?: string|}",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|+type: \"none\"|}",
              "signature": {
                "properties": [
                  {
                    "key": "type",
                    "value": {
                      "name": "literal",
                      "value": "\"none\"",
                      "required": true
                    }
                  }
                ]
              }
            },
            {
              "name": "signature",
              "type": "object",
              "raw": "{|+type: \"filter\", +placeholder?: string|}",
              "signature": {
                "properties": [
                  {
                    "key": "type",
                    "value": {
                      "name": "literal",
                      "value": "\"filter\"",
                      "required": true
                    }
                  },
                  {
                    "key": "placeholder",
                    "value": {"name": "string", "required": false}
                  }
                ]
              }
            }
          ]
        },
        "defaultValue": "{type: \"none\"}"
      },
      {
        "name": "onChange",
        "required": true,
        "description": "Called when the selected value changes",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(newValue: ValueObj<T>) => void",
          "signature": {
            "arguments": [
              {
                "name": "newValue",
                "type": {
                  "name": "ValueObj",
                  "elements": [{"name": "T"}],
                  "raw": "ValueObj<T>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onRemove",
        "required": false,
        "description": "Replaces the downOpen icon with an X button. When this button is pressed,\nonRemove is called",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "shyLabel",
        "required": false,
        "description": "Whether the label hides if there are any options selected",
        "type": {"name": "boolean"}
      },
      {
        "name": "size",
        "required": false,
        "description": "The size of the filter button",
        "type": {"name": "Size"}
      },
      {
        "name": "disabled",
        "required": false,
        "description": "Whether the filter is disabled",
        "type": {"name": "boolean"}
      },
      {
        "name": "dropdownPlacement",
        "required": false,
        "description": "controls where the dropdown menu is anchored in relation to the multiselect input",
        "type": {"name": "PopupPlacement"}
      },
      {
        "name": "noPortal",
        "required": false,
        "description": "whether to use a Portal or React Fragment component",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "SearchableMultiselectFilter": {
    "brandStatus": "V2",
    "category": "Filter",
    "description": "SearchableMultiselectFilter is the filter analog for MultiselectInput. The API is the same as MultiselectInput, but appears in a filter UX. SearchableMultiselectFilter differs from MultiselectFilter solely in UX and can be used interchangeably.",
    "name": "SearchableMultiselectFilter",
    "shortDescription": "SearchableMultiselectFilter allows users to filter by multiple values from a list",
    "status": "Stable",
    "componentPath": "filter/SearchableMultiselectFilter",
    "repoFilePath": "webpack/assets/javascripts/latitude/filter/SearchableMultiselectFilter.jsx",
    "props": [
      {
        "name": "label",
        "required": true,
        "description": "Description of the filter pivot, e.g. `City`",
        "type": {"name": "string"}
      },
      {
        "name": "value",
        "required": true,
        "description": "The currently selected value",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "T"}],
          "raw": "$ReadOnlyArray<T>"
        }
      },
      {
        "name": "options",
        "required": true,
        "description": "The list of options to be picked from",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {"name": "Option", "elements": [{"name": "T"}], "raw": "Option<T>"}
          ],
          "raw": "$ReadOnlyArray<Option<T>>"
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "Called when the selected value changes",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(newValue: $ReadOnlyArray<T>) => void",
          "signature": {
            "arguments": [
              {
                "name": "newValue",
                "type": {
                  "name": "$ReadOnlyArray",
                  "elements": [{"name": "T"}],
                  "raw": "$ReadOnlyArray<T>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onSearchTextChange",
        "required": false,
        "description": "Called when the search text changes",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(text: string) => void",
          "signature": {
            "arguments": [{"name": "text", "type": {"name": "string"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onRemove",
        "required": false,
        "description": "Replaces the downOpen icon with an X button. When this button is pressed,\nonRemove is called",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "shyLabel",
        "required": false,
        "description": "Whether the label hides if there are any options selected",
        "type": {"name": "boolean"}
      },
      {
        "name": "size",
        "required": false,
        "description": "The size of the filter button",
        "type": {"name": "Size"}
      },
      {
        "name": "disabled",
        "required": false,
        "description": "Whether the filter is disabled",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "dropdownPlacement",
        "required": false,
        "description": "controls where the dropdown menu is anchored in relation to the multiselect input",
        "type": {"name": "PopupPlacement"}
      },
      {
        "name": "noPortal",
        "required": false,
        "description": "whether to use a Portal or React Fragment component",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "SelectFilter": {
    "brandStatus": "V2",
    "category": "Filter",
    "description": "SelectFilter is the filter analog for SelectInput. The API is the same as SelectInput, but appears in a filter UX.",
    "name": "SelectFilter",
    "shortDescription": "SelectFilter allows users to filter by a value from a list of values",
    "status": "Stable",
    "componentPath": "filter/SelectFilter",
    "repoFilePath": "webpack/assets/javascripts/latitude/filter/SelectFilter.jsx",
    "props": [
      {
        "name": "label",
        "required": true,
        "description": "Description of the filter pivot, e.g. `City`",
        "type": {"name": "string"}
      },
      {
        "name": "value",
        "required": true,
        "description": "The currently selected value",
        "type": {
          "name": "union",
          "raw": "T | null",
          "elements": [{"name": "T"}, {"name": "null"}]
        }
      },
      {
        "name": "options",
        "required": true,
        "description": "The list of options to be picked from",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {"name": "Option", "elements": [{"name": "T"}], "raw": "Option<T>"}
          ],
          "raw": "$ReadOnlyArray<Option<T>>"
        }
      },
      {
        "name": "onChange",
        "required": false,
        "description": "Called when the selected value changes",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(T | null) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "T | null",
                  "elements": [{"name": "T"}, {"name": "null"}]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onRemove",
        "required": false,
        "description": "Replaces the downOpen icon with an X button. When this button is pressed,\nonRemove is called",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "shyLabel",
        "required": false,
        "description": "Whether the label hides if there are any options selected",
        "type": {"name": "boolean"}
      },
      {
        "name": "isNullable",
        "required": false,
        "description": "Whether the user can select the empty element from the list. This calls onChange with null",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "size",
        "required": false,
        "description": "The size of the filter button",
        "type": {"name": "Size"}
      },
      {
        "name": "disabled",
        "required": false,
        "description": "Whether the filter is disabled",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "dropdownPlacement",
        "required": false,
        "description": "controls where the dropdown menu is anchored in relation to the multiselect input",
        "type": {"name": "PopupPlacement"}
      },
      {
        "name": "noPortal",
        "required": false,
        "description": "whether to use a Portal or React Fragment component",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "FormRow": {
    "brandStatus": "V2",
    "category": "Forms",
    "description": "`FormRows` must live inside `FormSection`s. See [FormSection](/design/components/FormSection)  documentation for examples. See [Form Guidelines](/design/guidelines/forms) for detailed usage information.",
    "name": "FormRow",
    "shortDescription": "Wrapper component for groups of data entry components",
    "status": "Beta",
    "componentPath": "form/FormRow",
    "repoFilePath": "webpack/assets/javascripts/latitude/form/FormRow.jsx",
    "props": [
      {
        "name": "columnSpans",
        "required": true,
        "description": "Specify a column span for each row element, alternatively specify responsive column spans and any or all breakpoints",
        "type": {
          "name": "Array",
          "elements": [
            {
              "name": "union",
              "raw": "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8",
              "elements": [
                {"name": "literal", "value": "1"},
                {"name": "literal", "value": "2"},
                {"name": "literal", "value": "3"},
                {"name": "literal", "value": "4"},
                {"name": "literal", "value": "5"},
                {"name": "literal", "value": "6"},
                {"name": "literal", "value": "7"},
                {"name": "literal", "value": "8"}
              ]
            }
          ],
          "raw": "Array<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8>"
        }
      },
      {
        "name": "children",
        "required": true,
        "description": "An array of form elements (generally our data entry components)",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      }
    ]
  },
  "FormSection": {
    "brandStatus": "V2",
    "category": "Forms",
    "description": "See [Form Guidelines](/design/guidelines/forms) for detailed usage information. Refer to [FormRow documentation](/design/components/FormRow) for specific implementation of `FormRow`s",
    "name": "FormSection",
    "shortDescription": "Groups of FormRows",
    "status": "Beta",
    "componentPath": "form/FormSection",
    "repoFilePath": "webpack/assets/javascripts/latitude/form/FormSection.jsx",
    "props": [
      {
        "name": "columns",
        "required": true,
        "description": "Form sections usually span one or two columns, but can span up to four columns for dense layouts or rows with many common data entry components.",
        "type": {"name": "number"}
      },
      {
        "name": "sectionTitle",
        "required": false,
        "description": "The title of the section should be used to introduce the group of form elements.",
        "type": {"name": "string"}
      },
      {
        "name": "description",
        "required": false,
        "description": "Optional field for supplying a form description. Descriptions help set expectations and directions for the user.",
        "type": {"name": "string"}
      },
      {
        "name": "minColumnWidth",
        "required": true,
        "description": "Sets the minimum column width (in px). This allows the grid to know when it needs to break to new lines.",
        "type": {"name": "number"}
      },
      {
        "name": "columnGap",
        "required": false,
        "description": "The amount of space between columns and between elements that wrap to a new line in a FormRow.",
        "type": {
          "name": "union",
          "raw": "12 | 20 | 32",
          "elements": [
            {"name": "literal", "value": "12"},
            {"name": "literal", "value": "20"},
            {"name": "literal", "value": "32"}
          ]
        },
        "defaultValue": "20"
      },
      {
        "name": "rowGap",
        "required": false,
        "description": "The amount of space between FormRows",
        "type": {
          "name": "union",
          "raw": "12 | 20 | 32",
          "elements": [
            {"name": "literal", "value": "12"},
            {"name": "literal", "value": "20"},
            {"name": "literal", "value": "32"}
          ]
        },
        "defaultValue": "32"
      },
      {
        "name": "children",
        "required": true,
        "description": "An array of FormRows or FormSections. All forms are composed of one to many sections with any number of FormRows and sub-sections.",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "onRequestDelete",
        "required": false,
        "description": "A trash icon opposite the section title will only appear if an onDelete function is provided.\nThis is generally meant to be used for nested sections. In some instances, a form may require\na user to dynamically add and remove sub-sections (like adding/removing a number of containers).",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      }
    ]
  },
  "CustomModal": {
    "brandStatus": "V2",
    "category": "Overlay",
    "description": "Avoid using this modal if you can; we have GeneralModalLoader, AlertModal, and ConfirmationModal for most use cases. To use this modal, provide a css class that contains all the desired styles for the content pane. You'll likely want to use the majority of the default styles for modals, which are exported from this file. it will look like: \n\n ``` css(defaultModalStyles.content, your.custom.styles); ``` \n\n The most important style to specify yourself is maxWidth; without it, your modal will take up the whole screen. \n\n You may be tempted to use isOpen to toggle between modal visible states. Think twice about this - 95% of modal use cases you _want_ the modal to unmount as it becomes visible / hidden. Otherwise, things like form state from the previous modal opening may persist through. By default `isOpen` is true, and we recommend toggling it via {this.state.isModalShowing ? <CustomModal /> : null} \n\n Note: Don't instantiate this using ModalStore.show(). This component handles adding and removing itself from global state when you mount it and its value is set to isOpen, and hides itself when it is unmounted or isOpen is set to false. \n\n **Testing** \n\n During unit tests, CustomModal will render into the DOM where you've placed it in the render function. This differs from its behavior on a browser, where it renders into a react-portal at the top level (attached to the <body> of a page). This should make it easy to test toggling modal visibility. \n\n Technically, there is one last hurdle for visibility beyond rendering something that uses CustomModal. This is whether or not the global ModalStoreNew is rendering the modal. If there is more than one, it will just render the last one in the list. In your test, you can call the method isVisible (a method on the React class) in order to tell if your modal is the one that is being displayed. \n\n Uses [react-modal](https://reactcommunity.org/react-modal/).",
    "name": "CustomModal",
    "shortDescription": "Full screen takeover, an semi-transparent black canvas drawn over the page.",
    "status": "In Review",
    "componentPath": "modal/CustomModal",
    "repoFilePath": "webpack/assets/javascripts/latitude/modal/CustomModal.jsx",
    "props": [
      {
        "name": "visibleModal",
        "required": true,
        "description": "",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n  +uniqueId: string,\n|}",
              "signature": {
                "properties": [
                  {
                    "key": "uniqueId",
                    "value": {"name": "string", "required": true}
                  }
                ]
              }
            }
          ],
          "raw": "$ReadOnlyArray<{|\n  +uniqueId: string,\n|}>"
        }
      },
      {
        "name": "isOpen",
        "required": false,
        "description": "Not recommended to use this property.\nIf you decide to have this modal always rendered, use isOpen to control if it's open or closed.\nGenerally, it's better to have logic like: {isModalOpen ? <CustomModal /> : null}, because that\nway there is a fresh new component in between modal toggles (otherwise form state would be maintined, etc.)\nTODO(uforic): This has a default value of true, but HOCs don't handle default prop type resolution.",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "closeOptions",
        "required": false,
        "description": "Close options are optional; if specified, they require at least an onRequestClose function.\nCurrently, we support \"shouldCloseOnEsc\" and \"shouldCloseOnOverlayClick\", which are disabled by default.",
        "type": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  onRequestClose: () => void,\n  shouldCloseOnEsc?: boolean,\n  shouldCloseOnOverlayClick?: boolean,\n}",
          "signature": {
            "properties": [
              {
                "key": "onRequestClose",
                "value": {
                  "name": "signature",
                  "type": "function",
                  "raw": "() => void",
                  "signature": {"arguments": [], "return": {"name": "void"}},
                  "required": true
                }
              },
              {
                "key": "shouldCloseOnEsc",
                "value": {"name": "boolean", "required": false}
              },
              {
                "key": "shouldCloseOnOverlayClick",
                "value": {"name": "boolean", "required": false}
              }
            ]
          }
        }
      },
      {
        "name": "overlayClassName",
        "required": false,
        "description": "defines the style object of the holding container that appears on the black overlay",
        "type": {"name": "string"}
      },
      {
        "name": "className",
        "required": true,
        "description": "Defines the style object of the holding container that appears on the black overlay.\nRequired, but it is recommended that you start from the defaultModalStyles, defined and exported in\nthis file, which will set up the box shadow, border, etc. If you'd like to have a fixed width modal,\nplease choose from the sizes exported in defaultModalStyles, or add another size if it's likely to be reused.\nLastly, StaticGeneralModalLoader is implemented with customModal, so check it out to see how to use CustomModal.",
        "type": {"name": "string"}
      },
      {
        "name": "children",
        "required": true,
        "description": "body of the modal",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      }
    ]
  },
  "GeneralModalBody": {
    "brandStatus": "V2",
    "category": "Overlay",
    "description": "To create modals, visit [GeneralModalLoader docs](/design/components/GeneralModalLoader) and [StaticGeneralModalLoader docs](/design/components/StaticGeneralModalLoader) for more usage details and how they work with GeneralModalBody. Please note that GeneralModalBody is also responsible for placing the option buttons (ie. cancel/submit).",
    "name": "GeneralModalBody",
    "shortDescription": "Body of a modal which should be used with StaticGeneralModalLoader or GeneralModalLoader to load statically or dynamically.",
    "status": "Stable",
    "componentPath": "modal/GeneralModalBody",
    "repoFilePath": "webpack/assets/javascripts/latitude/modal/GeneralModalBody.jsx",
    "props": [
      {
        "name": "buttons",
        "required": true,
        "description": "a set of buttons corresponding to actions that can be taken in the modal form",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "ReactElement",
              "raw": "React.Element<Button | CustomsButton>",
              "elements": [
                {
                  "name": "union",
                  "raw": "Button | CustomsButton",
                  "elements": [{"name": "Button"}, {"name": "CustomsButton"}]
                }
              ]
            }
          ],
          "raw": "$ReadOnlyArray<React.Element<Button | CustomsButton>>"
        }
      },
      {
        "name": "children",
        "required": true,
        "description": "body of the modal",
        "type": {
          "name": "ReactChildrenArray",
          "raw": "React.ChildrenArray<React.Node>",
          "elements": [{"name": "ReactNode", "raw": "React.Node"}]
        }
      }
    ]
  },
  "GeneralModalLoader": {
    "brandStatus": "V2",
    "category": "Overlay",
    "description": "A shell modal UI that meets the animation needs of dynamic modals, with a title / subtitle and close icon on the top. In contrast to [StaticGeneralModalLoader](/design/components/StaticGeneralModalLoader) which loads modal content statically, GeneralModalLoader loads modal content dynamically using a promise. \n\n **How to create dynamic modals:** \n\n 1. Put all modal dependencies and content in a file and wrap the exported component in a GeneralModalBody. See [GeneralModalBody docs](/design/components/GeneralModalBody) for modal body component details. \n\n 2. In the component which you want to render the modal, use GeneralModalLoader with the exported component as child. \n\n **How it works** \n\n By design, GeneralModalLoader is responsible to initially render the outer modal box, which decides to show modal body or loader depending on the arrival of data. Additional behavior to note is that the modal should show the loading circle if the data takes longer than 50ms to load. However, if the modal data chunk was already loaded (it was opened previously) or if the modal data gets downloaded in under 50ms, then we show the modal directly.",
    "name": "GeneralModalLoader",
    "shortDescription": "GeneralModalLoader loads modal content dynamically and it should used in favor of static modals for dependency/code heavy modals.",
    "status": "Stable",
    "componentPath": "modal/GeneralModalLoader",
    "repoFilePath": "webpack/assets/javascripts/latitude/modal/GeneralModalLoader.jsx",
    "props": [
      {
        "name": "_debug",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  preModalDelayMillis: number,\n  afterModalIsOpenMinLoaderDisplayMillis: number,\n  onCloseAfterErrorDelayMillis: number,\n  timeoutMillis: number,\n}",
          "signature": {
            "properties": [
              {
                "key": "preModalDelayMillis",
                "value": {"name": "number", "required": true}
              },
              {
                "key": "afterModalIsOpenMinLoaderDisplayMillis",
                "value": {"name": "number", "required": true}
              },
              {
                "key": "onCloseAfterErrorDelayMillis",
                "value": {"name": "number", "required": true}
              },
              {
                "key": "timeoutMillis",
                "value": {"name": "number", "required": true}
              }
            ]
          }
        },
        "defaultValue": "{\n  preModalDelayMillis: 50,\n  afterModalIsOpenMinLoaderDisplayMillis: 2000,\n  onCloseAfterErrorDelayMillis: 5000,\n  timeoutMillis: 10000,\n}"
      },
      {
        "name": "children",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  WrappedComponent: K,\n  loaderCallbacks: {\n    setTitle: string => void,\n  }\n) => React.Node",
          "signature": {
            "arguments": [
              {"name": "WrappedComponent", "type": {"name": "K"}},
              {
                "name": "loaderCallbacks",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{\n  setTitle: string => void,\n}",
                  "signature": {
                    "properties": [
                      {
                        "key": "setTitle",
                        "value": {
                          "name": "signature",
                          "type": "function",
                          "raw": "string => void",
                          "signature": {
                            "arguments": [
                              {"name": "", "type": {"name": "string"}}
                            ],
                            "return": {"name": "void"}
                          },
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {"name": "ReactNode", "raw": "React.Node"}
          }
        }
      },
      {
        "name": "component",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => Promise<{\n  default: K,\n} | void>",
          "signature": {
            "arguments": [],
            "return": {
              "name": "Promise",
              "elements": [
                {
                  "name": "union",
                  "raw": "{\n  default: K,\n} | void",
                  "elements": [
                    {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  default: K,\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "default",
                            "value": {"name": "K", "required": true}
                          }
                        ]
                      }
                    },
                    {"name": "void"}
                  ]
                }
              ],
              "raw": "Promise<{\n  default: K,\n} | void>"
            }
          }
        }
      },
      {
        "name": "onClose",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "title",
        "required": false,
        "description": "",
        "type": {"name": "string"},
        "defaultValue": "\"\""
      },
      {
        "name": "width",
        "required": false,
        "description": "will determine the max width of the standard modal, to see what sizes these correspond to check CustomModal.",
        "type": {
          "name": "union",
          "raw": "\"s\" | \"m\" | \"l\"",
          "elements": [
            {"name": "literal", "value": "\"s\""},
            {"name": "literal", "value": "\"m\""},
            {"name": "literal", "value": "\"l\""}
          ]
        },
        "defaultValue": "\"m\""
      }
    ]
  },
  "NotificationModal": {
    "brandStatus": "V2",
    "category": "Overlay",
    "description": "",
    "name": "NotificationModal",
    "shortDescription": "Simple notification modal. These are not dynamically loaded, because they are just text. For more complext modals, use GeneralModalBody.",
    "status": "Stable",
    "componentPath": "modal/NotificationModal",
    "repoFilePath": "webpack/assets/javascripts/latitude/modal/NotificationModal.jsx",
    "props": [
      {
        "name": "title",
        "required": true,
        "description": "title of the modal body",
        "type": {"name": "string"}
      },
      {
        "name": "buttons",
        "required": true,
        "description": "a set of buttons corresponding to actions that can be taken in the modal form",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "ReactElement",
              "raw": "React.Element<Button>",
              "elements": [{"name": "Button"}]
            }
          ],
          "raw": "$ReadOnlyArray<React.Element<Button>>"
        }
      },
      {
        "name": "children",
        "required": true,
        "description": "body of the modal",
        "type": {
          "name": "ReactChildrenArray",
          "raw": "React.ChildrenArray<React.Element<Text | Link>>",
          "elements": [
            {
              "name": "ReactElement",
              "raw": "React.Element<Text | Link>",
              "elements": [
                {
                  "name": "union",
                  "raw": "Text | Link",
                  "elements": [{"name": "Text"}, {"name": "Link"}]
                }
              ]
            }
          ]
        }
      },
      {
        "name": "onRequestClose",
        "required": true,
        "description": "What do to when the \"X\" to the modal is clicked",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      }
    ]
  },
  "StaticGeneralModalLoader": {
    "brandStatus": "V2",
    "category": "Overlay",
    "description": "Unlike [GeneralModalLoader](/design/components/GeneralModalLoader), StaticGeneralModalLoader statically loads modal content (it is not promised based) for the use of light modals (where it becomes more expensive to use GeneralModalLoader). \n\n **How to create static modals:** \n\n 1. Put all the components which the modal should render in [GeneralModalBody](/design/components/GeneralModalBody). \n\n 2. Wrap the GeneralModalBody with StaticGeneralModalLoader \n\n Please note that we'd like to code split on large modals, since we only need modal contents when the modal is shown, and replacing it with GeneralModalLoader would reduce bundle size in comparison to light modals. So, avoid using StaticGeneralModalLoader for modals which are larger than GeneralModalLoader!",
    "name": "StaticGeneralModalLoader",
    "shortDescription": "A shell modal UI that meets the animation needs of a static modal, with a title / subtitle and close icon on the top.",
    "status": "Stable",
    "componentPath": "modal/StaticGeneralModalLoader",
    "repoFilePath": "webpack/assets/javascripts/latitude/modal/StaticGeneralModalLoader.jsx",
    "props": [
      {
        "name": "title",
        "required": true,
        "description": "a string rendered along the top of the modal",
        "type": {"name": "string"}
      },
      {
        "name": "subtitle",
        "required": false,
        "description": "an optional subtitle rendered to the right side of the title",
        "type": {"name": "string"}
      },
      {
        "name": "onRequestClose",
        "required": false,
        "description": "An x to cancel the modal will only appear if an onRequestClose function is provided.\nYou may also provide a cancel button in the buttons prop, and it will likely reference\nthe same function.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "width",
        "required": false,
        "description": "will determine the max width of the standard modal, to see what sizes these correspond to check CustomModal.",
        "type": {
          "name": "union",
          "raw": "\"s\" | \"m\" | \"l\"",
          "elements": [
            {"name": "literal", "value": "\"s\""},
            {"name": "literal", "value": "\"m\""},
            {"name": "literal", "value": "\"l\""}
          ]
        },
        "defaultValue": "\"m\""
      },
      {
        "name": "children",
        "required": true,
        "description": "body of the modal",
        "type": {
          "name": "ReactChildrenArray",
          "raw": "React.ChildrenArray<React.Node>",
          "elements": [{"name": "ReactNode", "raw": "React.Node"}]
        }
      }
    ]
  },
  "CustomPopover": {
    "brandStatus": "V2",
    "category": "Overlay",
    "description": "",
    "name": "CustomPopover",
    "shortDescription": "Popovers are small overlays used to display additional options or content. Avoid using CustomPopover unless the content of your popover will not work with GeneralPopover.",
    "status": "Beta",
    "componentPath": "popover/CustomPopover",
    "repoFilePath": "webpack/assets/javascripts/latitude/popover/CustomPopover.jsx",
    "props": [
      {
        "name": "children",
        "required": true,
        "description": "body of the popover",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      }
    ]
  },
  "GeneralPopover": {
    "brandStatus": "V2",
    "category": "Overlay",
    "description": "",
    "name": "GeneralPopover",
    "shortDescription": "Popovers are small overlays used to display additional options or content. GeneralPopover should be used for most popovers unless custom content is necessary, in which case use CustomPopover",
    "status": "In Review",
    "componentPath": "popover/GeneralPopover",
    "repoFilePath": "webpack/assets/javascripts/latitude/popover/GeneralPopover.jsx",
    "props": [
      {
        "name": "title",
        "required": true,
        "description": "main heading",
        "type": {"name": "string"}
      },
      {
        "name": "subtitle",
        "required": false,
        "description": "optional subheading underneath title",
        "type": {"name": "string"}
      },
      {
        "name": "children",
        "required": true,
        "description": "body of the popover",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "buttons",
        "required": true,
        "description": "a set of buttons corresponding to actions that can be taken in the popover body",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "ReactElement",
              "raw": "React.Element<Button | CustomsButton>",
              "elements": [
                {
                  "name": "union",
                  "raw": "Button | CustomsButton",
                  "elements": [{"name": "Button"}, {"name": "CustomsButton"}]
                }
              ]
            }
          ],
          "raw": "$ReadOnlyArray<React.Element<Button | CustomsButton>>"
        }
      }
    ]
  },
  "ProgressTracker": {
    "brandStatus": "V2",
    "category": "Data Display",
    "description": "For use in a scanning capacity, providing progress status at a glance. The light progress bar is designed to be embedded in side a larger element, like a cell inside of a table row or as a button inside a card. \n\n The state of the process is derived implicitly from the `progress` value: <br>1. `pending` at `progress = 0` <br>2. `active` at `0 < progress < 1` <br>3. `completed` at `progress = 1` \n\n Icons can be supplied separately for each of the above states if desired. The appearance of the component is intentionally distinct at each state to provide increased visual contrast between states.",
    "name": "ProgressTracker",
    "shortDescription": "A progress bar for displaying the progress of a particular process",
    "status": "Beta",
    "componentPath": "progress/ProgressTracker",
    "repoFilePath": "webpack/assets/javascripts/latitude/progress/ProgressTracker.jsx",
    "props": [
      {
        "name": "progressIcon",
        "required": true,
        "description": "The primary icon to show as the progress node while state is `active`.",
        "type": {"name": "IconNames"}
      },
      {
        "name": "progress",
        "required": true,
        "description": "The decimal from 0 to 1 representing the progress of the shipment.",
        "type": {"name": "number"}
      },
      {
        "name": "startIcon",
        "required": false,
        "description": "An optional icon to show as the progress node when state is `pending`.\nIf not provided, `progressIcon` will be used instead.",
        "type": {"name": "IconNames"}
      },
      {
        "name": "endIcon",
        "required": false,
        "description": "An optional icon to show as the progress node when state is `completed`.\nIf not provided, `progressIcon` will be used instead.",
        "type": {"name": "IconNames"}
      },
      {
        "name": "label",
        "required": false,
        "description": "The actual text to use as the label.",
        "type": {"name": "string"},
        "defaultValue": "null"
      },
      {
        "name": "error",
        "required": false,
        "description": "Whether to represent status with an error state.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "Radio": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "Radio",
    "shortDescription": "Radio collects a single option from the user. Please refer to RadioGroup to implement a basic group radio input.",
    "status": "Stable",
    "componentPath": "radio/Radio",
    "repoFilePath": "webpack/assets/javascripts/latitude/radio/Radio.jsx",
    "props": [
      {
        "name": "checked",
        "required": true,
        "description": "whether the radio button is currently checked",
        "type": {"name": "boolean"}
      },
      {
        "name": "value",
        "required": true,
        "description": "the value associated with the radio button",
        "type": {"name": "T"}
      },
      {
        "name": "name",
        "required": true,
        "description": "the name associated with the button",
        "type": {"name": "string"}
      },
      {
        "name": "label",
        "required": false,
        "description": "the label for the radio button",
        "type": {
          "name": "union",
          "raw": "string | React.Node",
          "elements": [
            {"name": "string"},
            {"name": "ReactNode", "raw": "React.Node"}
          ]
        }
      },
      {
        "name": "disabled",
        "required": false,
        "description": "whether the radio button is disabled",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "whether the radio button is invalid",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "size",
        "required": false,
        "description": "the size of the radio",
        "type": {"name": "Size"},
        "defaultValue": "\"s\""
      },
      {
        "name": "onChange",
        "required": true,
        "description": "this function is invoked when the radio button is changed",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(value: T) => void",
          "signature": {
            "arguments": [{"name": "value", "type": {"name": "T"}}],
            "return": {"name": "void"}
          }
        }
      }
    ]
  },
  "RadioGroup": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "RadioGroup",
    "shortDescription": "RadioGroup collects a single option from an array of many options from the user.",
    "status": "Stable",
    "componentPath": "radio/RadioGroup",
    "repoFilePath": "webpack/assets/javascripts/latitude/radio/RadioGroup.jsx",
    "props": [
      {
        "name": "options",
        "required": true,
        "description": "we support an array of strings OR type OptionObject",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "union",
              "raw": "OptionObject<T> | string",
              "elements": [
                {
                  "name": "OptionObject",
                  "elements": [{"name": "T"}],
                  "raw": "OptionObject<T>"
                },
                {"name": "string"}
              ]
            }
          ],
          "raw": "$ReadOnlyArray<OptionObject<T> | string>"
        }
      },
      {
        "name": "value",
        "required": true,
        "description": "the selected value",
        "type": {"name": "T", "nullable": true}
      },
      {
        "name": "onChange",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(newValue: T) => void",
          "signature": {
            "arguments": [{"name": "newValue", "type": {"name": "T"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "isInline",
        "required": false,
        "description": "moves from a vertical orientation to horizontal",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "size",
        "required": false,
        "description": "the size of the radio buttons",
        "type": {"name": "Size"},
        "defaultValue": "\"m\""
      },
      {
        "name": "disabled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "this is only here for type-safety, and has no actual effect",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "this is only here for type-safety, and has no actual effect",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "toKeyFn",
        "required": false,
        "description": "specify this if the values you are providing are not strings. you need to provide a function that takes an object of type K and generates strings so we can dedupe / tell what's selected",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(value: ?T | string) => string",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "union",
                  "raw": "?T | string",
                  "elements": [
                    {"name": "T", "nullable": true},
                    {"name": "string"}
                  ]
                }
              }
            ],
            "return": {"name": "string"}
          }
        },
        "defaultValue": "value => String(JSON.stringify(value))"
      }
    ]
  },
  "BaseReactSelect": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "Try and use AlgoliaInput, or SearchableSelectInput instead. If you absolutely need to override react-select, you can use this component. We purposefully restrict some of the options that react-select gives you to a more reasonable set, and to prepare for the upgrade to the 2.0 library of react-select (where the API changes a lot).",
    "name": "BaseReactSelect",
    "shortDescription": "Use BaseReactSelect when you want bare metal access to the react-select library.",
    "status": "Stable",
    "componentPath": "select/BaseReactSelect",
    "repoFilePath": "webpack/assets/javascripts/latitude/select/BaseReactSelect.jsx",
    "props": [
      {
        "name": "value",
        "required": true,
        "description": "",
        "type": {
          "name": "union",
          "raw": "T | null",
          "elements": [{"name": "T"}, {"name": "null"}]
        }
      },
      {
        "name": "placeholder",
        "required": false,
        "description": "",
        "type": {"name": "string"},
        "defaultValue": "\"\""
      },
      {
        "name": "renderOptions",
        "required": true,
        "description": "You have 3 ways to render option:\n1) have the valueRenderer take care of it\n2) Provide an option renderer, and have react select render the options for you\n3) Provide a menuRenderer, and take full control of the look and feel of the menu",
        "type": {
          "name": "ReactSelectRenderOptions",
          "elements": [{"name": "T"}],
          "raw": "ReactSelectRenderOptions<T>"
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(T | null) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "T | null",
                  "elements": [{"name": "T"}, {"name": "null"}]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "isLarge",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "keyFn",
        "required": true,
        "description": "this is a function that converts a type T to a unique string value. it's needed by react select to link values to options.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "T => ReactSelectKey",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "T"}}],
            "return": {"name": "ReactSelectKey"}
          }
        }
      },
      {
        "name": "options",
        "required": true,
        "description": "",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {"name": "Option", "elements": [{"name": "T"}], "raw": "Option<T>"}
          ],
          "raw": "$ReadOnlyArray<Option<T>>"
        }
      },
      {
        "name": "onTextInputChange",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(query: string) => void",
          "signature": {
            "arguments": [{"name": "query", "type": {"name": "string"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "disabled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "indicates the selected value is invalid.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "filterOption",
        "required": false,
        "description": "this should be deprecated.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(T, string) => boolean",
          "signature": {
            "arguments": [
              {"name": "", "type": {"name": "T"}},
              {"name": "", "type": {"name": "string"}}
            ],
            "return": {"name": "boolean"}
          }
        }
      },
      {
        "name": "isNullable",
        "required": false,
        "description": "determines if the user can X out a selected value",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "valueRenderer",
        "required": true,
        "description": "renders the selected value into the text input. You can also render just text.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(?T) => React.Node",
          "signature": {
            "arguments": [
              {"name": "", "type": {"name": "T", "nullable": true}}
            ],
            "return": {"name": "ReactNode", "raw": "React.Node"}
          }
        }
      },
      {
        "name": "autoFocus",
        "required": false,
        "description": "focus the control when it mounts",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "DropdownList": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "DropdownList",
    "shortDescription": "The menu that displays options in a dropdown / select",
    "status": "In Review",
    "componentPath": "select/DropdownList",
    "repoFilePath": "webpack/assets/javascripts/latitude/select/DropdownList.jsx",
    "props": [
      {
        "name": "options",
        "required": true,
        "description": "a list of options for the dropdown list to display",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n  /** the unique label associated with the option. */\n  +label: string,\n  /** can be used to render a custom view */\n  +customView?: React.Node,\n  /** name of the section the option should go under */\n  +section?: string,\n  /** whether the option is disabled */\n  +disabled?: boolean,\n|}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {"name": "string", "required": true}
                  },
                  {
                    "key": "customView",
                    "value": {
                      "name": "ReactNode",
                      "raw": "React.Node",
                      "required": false
                    }
                  },
                  {
                    "key": "section",
                    "value": {"name": "string", "required": false}
                  },
                  {
                    "key": "disabled",
                    "value": {"name": "boolean", "required": false}
                  }
                ]
              }
            }
          ],
          "raw": "$ReadOnlyArray<Option>"
        }
      },
      {
        "name": "sectionOrder",
        "required": false,
        "description": "the list to dicate the order sections should be ordered",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "string"}],
          "raw": "$ReadOnlyArray<string>"
        }
      },
      {
        "name": "highlightedOption",
        "required": false,
        "description": "specify an optional label to highlight",
        "type": {
          "name": "union",
          "raw": "string | null",
          "elements": [{"name": "string"}, {"name": "null"}]
        }
      },
      {
        "name": "onClick",
        "required": true,
        "description": "called when a dropdown option is clicked",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(selected: string) => void",
          "signature": {
            "arguments": [{"name": "selected", "type": {"name": "string"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "isOpen",
        "required": false,
        "description": "whether the dropdownlist is open. a closed dropdownlist will be hidden",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "header",
        "required": false,
        "description": "an optional sticky header",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "footer",
        "required": false,
        "description": "an optional sticky footer",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "maxHeight",
        "required": false,
        "description": "specifies the maximum height of the dropdown list",
        "type": {"name": "number"},
        "defaultValue": "400"
      }
    ]
  },
  "DropdownOption": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "DropdownOption",
    "shortDescription": "A singular option used by the dropdown list",
    "status": "In Review",
    "componentPath": "select/DropdownOption",
    "repoFilePath": "webpack/assets/javascripts/latitude/select/DropdownOption.jsx",
    "props": [
      {
        "name": "label",
        "required": true,
        "description": "the unique label associated with the option.",
        "type": {"name": "string"}
      },
      {
        "name": "customView",
        "required": false,
        "description": "can be used to render a custom view",
        "type": {"name": "ReactNode", "raw": "React.Node"}
      },
      {
        "name": "isHighlighted",
        "required": false,
        "description": "whether the option is currently highlighted",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "onClick",
        "required": false,
        "description": "called when the option is clicked",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(selected: string) => void",
          "signature": {
            "arguments": [{"name": "selected", "type": {"name": "string"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "disabled",
        "required": false,
        "description": "whether the option is disabled",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "MultiselectInput": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "MultiselectInput",
    "shortDescription": "Use MultiselectInput when constructing forms, if you need to select multiple values from a list.",
    "status": "Stable",
    "componentPath": "select/MultiselectInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/select/MultiselectInput.jsx",
    "props": [
      {
        "name": "displaySelectAllButton",
        "required": false,
        "description": "creates a section above the options that allows you to select all",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "disabled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "displayText",
        "required": false,
        "description": "a default generation algorith is used, called `generateOverviewText`, but you can use it yourself with different props and pass in the text it creates optionally",
        "type": {"name": "string"}
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "someSelectedUnits",
        "required": false,
        "description": "we generate a summary of what's selected, and if you provide this can say something like \"2 people selected\" instead of \"2 items selected\"",
        "type": {"name": "string"}
      },
      {
        "name": "placement",
        "required": false,
        "description": "controls where the dropdown menu is anchord in relation to the multiselect input",
        "type": {
          "name": "union",
          "raw": "\"bottom-end\" | \"bottom-start\"",
          "elements": [
            {"name": "literal", "value": "\"bottom-end\""},
            {"name": "literal", "value": "\"bottom-start\""}
          ]
        },
        "defaultValue": "\"bottom-end\""
      },
      {
        "name": "filterSearchMode",
        "required": false,
        "description": "whether or not a searchable input is visible",
        "type": {"name": "FilterMode"},
        "defaultValue": "{type: \"none\"}"
      },
      {
        "name": "options",
        "required": true,
        "description": "",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {"name": "Option", "elements": [{"name": "K"}], "raw": "Option<K>"}
          ],
          "raw": "$ReadOnlyArray<Option<K>>"
        }
      },
      {
        "name": "value",
        "required": true,
        "description": "",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "K"}],
          "raw": "$ReadOnlyArray<K>"
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(value: Array<K>) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "Array",
                  "elements": [{"name": "K"}],
                  "raw": "Array<K>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "toKeyFn",
        "required": false,
        "description": "if the items you are providing are not strings, you need to provide a function that takes an object of type K and generates strings so we can dedupe / tell what's selected.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "K => MultiselectKey",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "K"}}],
            "return": {"name": "string"}
          }
        },
        "defaultValue": "function defaultKeyFn<K>(val: K): MultiselectKey {\n  invariant(\n    typeof val === \"string\",\n    \"if not providing a string value in options, provide a to key function.\"\n  );\n  return val;\n}"
      },
      {
        "name": "theme",
        "required": true,
        "description": "$Hide(provided by higher order component)",
        "type": {"name": "Theme"}
      }
    ]
  },
  "MultiselectOptions": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "MultiselectOptions",
    "shortDescription": "Select multiple values from a list of options.",
    "status": "Stable",
    "componentPath": "select/MultiselectOptions",
    "repoFilePath": "webpack/assets/javascripts/latitude/select/MultiselectOptions.jsx",
    "props": [
      {
        "name": "values",
        "required": true,
        "description": "The currently selected list of values",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "T"}],
          "raw": "$ReadOnlyArray<T>"
        }
      },
      {
        "name": "onChange",
        "required": true,
        "description": "Called whenever the selected items changes",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(values: $ReadOnlyArray<T>) => void",
          "signature": {
            "arguments": [
              {
                "name": "values",
                "type": {
                  "name": "$ReadOnlyArray",
                  "elements": [{"name": "T"}],
                  "raw": "$ReadOnlyArray<T>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "options",
        "required": true,
        "description": "The list of options to pick from",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {"name": "Option", "elements": [{"name": "T"}], "raw": "Option<T>"}
          ],
          "raw": "$ReadOnlyArray<Option<T>>"
        }
      },
      {
        "name": "displaySelectAllButton",
        "required": true,
        "description": "Displays a select all button as the first item of the list",
        "type": {"name": "boolean"}
      },
      {
        "name": "filterSearchMode",
        "required": false,
        "description": "If `filterSearchMode` is set to `filter`, a text input will be included\nthat will filter down on the visible options",
        "type": {
          "name": "union",
          "raw": "| {|+type: \"none\"|}\n| {|+type: \"filter\", +placeholder?: string|}",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|+type: \"none\"|}",
              "signature": {
                "properties": [
                  {
                    "key": "type",
                    "value": {
                      "name": "literal",
                      "value": "\"none\"",
                      "required": true
                    }
                  }
                ]
              }
            },
            {
              "name": "signature",
              "type": "object",
              "raw": "{|+type: \"filter\", +placeholder?: string|}",
              "signature": {
                "properties": [
                  {
                    "key": "type",
                    "value": {
                      "name": "literal",
                      "value": "\"filter\"",
                      "required": true
                    }
                  },
                  {
                    "key": "placeholder",
                    "value": {"name": "string", "required": false}
                  }
                ]
              }
            }
          ]
        },
        "defaultValue": "{type: \"none\"}"
      }
    ]
  },
  "SearchableSelectInput": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "SearchableSelectInput",
    "shortDescription": "Use SearchableSelectInput when constructing forms, if you need to select only one value from a list but the list is long.",
    "status": "Stable",
    "componentPath": "select/SearchableSelectInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/select/SearchableSelectInput.jsx",
    "props": [
      {
        "name": "value",
        "required": true,
        "description": "the current selected value of the select input",
        "type": {
          "name": "union",
          "raw": "T | null",
          "elements": [{"name": "T"}, {"name": "null"}]
        }
      },
      {
        "name": "options",
        "required": true,
        "description": "the options the select input will display (see `Option` type for option's parameters)",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {"name": "Option", "elements": [{"name": "T"}], "raw": "Option<T>"}
          ],
          "raw": "$ReadOnlyArray<Option<T>>"
        }
      },
      {
        "name": "placeholder",
        "required": false,
        "description": "placeholder text that will be displayed when the select input is empty",
        "type": {"name": "string"},
        "defaultValue": "\"\""
      },
      {
        "name": "disabled",
        "required": false,
        "description": "whether the entire select input is disabled",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "size",
        "required": false,
        "description": "the size of the input field",
        "type": {"name": "Size"},
        "defaultValue": "\"m\""
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "whether the select input is in an invalid state",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isNullable",
        "required": false,
        "description": "when true, this allows the user to select the empty element from the list. this calls onChange with `null`.",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "isPrefilled",
        "required": false,
        "description": "whether the select input is in an prefilled state",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "onChange",
        "required": true,
        "description": "called when the value of the select input is changed",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(T | null) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "union",
                  "raw": "T | null",
                  "elements": [{"name": "T"}, {"name": "null"}]
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onFocus",
        "required": false,
        "description": "called when the select input field is focused",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "called when the select input field is blurred",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      }
    ]
  },
  "SelectInput": {
    "brandStatus": "V2",
    "category": "Data Entry",
    "description": "",
    "name": "SelectInput",
    "shortDescription": "Use SelectInput when constructing forms, if you need to select only one value from a _short_ (< 10 options) list.",
    "status": "Stable",
    "componentPath": "select/SelectInput",
    "repoFilePath": "webpack/assets/javascripts/latitude/select/SelectInput.jsx",
    "props": [
      {
        "name": "value",
        "required": true,
        "description": "the currently selected value of the input",
        "type": {"name": "T", "nullable": true}
      },
      {
        "name": "options",
        "required": true,
        "description": "the options that the select input contains",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {"name": "Option", "elements": [{"name": "T"}], "raw": "Option<T>"}
          ],
          "raw": "$ReadOnlyArray<Option<T>>"
        }
      },
      {
        "name": "placeholder",
        "required": false,
        "description": "the placeholder text that will be displayed when the input is empty",
        "type": {"name": "string"},
        "defaultValue": "\"Select an option...\""
      },
      {
        "name": "size",
        "required": false,
        "description": "the size of the select input",
        "type": {
          "name": "union",
          "raw": "\"s\" | \"m\" | \"l\"",
          "elements": [
            {"name": "literal", "value": "\"s\""},
            {"name": "literal", "value": "\"m\""},
            {"name": "literal", "value": "\"l\""}
          ]
        },
        "defaultValue": "\"m\""
      },
      {
        "name": "isInvalid",
        "required": false,
        "description": "whether the input is invalid",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "readOnly",
        "required": false,
        "description": "whether the input is read only",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "disabled",
        "required": false,
        "description": "whether the input is disabled",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "onChange",
        "required": true,
        "description": "called when the value of the select input is changed",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(?T) => void",
          "signature": {
            "arguments": [
              {"name": "", "type": {"name": "T", "nullable": true}}
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onBlur",
        "required": false,
        "description": "called when the input is blurred",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "onFocus",
        "required": false,
        "description": "called when the input is focused",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "Event => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "Event"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "isNullable",
        "required": false,
        "description": "when true, this allows the user to select the empty element from the list. this calls onChange with `null`.",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "toKeyFn",
        "required": false,
        "description": "specify this if the values you are providing are not strings. you need to provide a function that takes an object of type K and generates strings so we can dedupe / tell what's selected",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(val: T) => string",
          "signature": {
            "arguments": [{"name": "val", "type": {"name": "T"}}],
            "return": {"name": "string"}
          }
        },
        "defaultValue": "function defaultKeyFn<K>(val: K): string {\n  invariant(\n    typeof val === \"string\",\n    \"if not providing a string value in options, provide a to key function.\"\n  );\n  return val.toString();\n}"
      }
    ]
  },
  "Table": {
    "brandStatus": "V2",
    "category": "Data Display",
    "description": "**DISCLAIMER: The table component is still under active development** \n\n `<Table />` efficiently displays large amounts of data, and supports column pinning, row selection, sorting, and scrolling. Expandable rows, cell selection, drag-and-drop column reordering, and other features are coming soon.",
    "name": "Table",
    "shortDescription": "Displays tabular data",
    "status": "Beta",
    "componentPath": "table/Table",
    "repoFilePath": "webpack/assets/javascripts/latitude/table/Table.jsx",
    "props": [
      {
        "name": "data",
        "required": true,
        "description": "An array of data for each row in the table",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "T"}],
          "raw": "$ReadOnlyArray<T>"
        }
      },
      {
        "name": "columnDefinitions",
        "required": true,
        "description": "Defines how each column of data is rendered. Each column definitions needs an id, a header, a Cell, a width, and a comparator for sorting",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "ColumnDefinition",
              "elements": [{"name": "T"}],
              "raw": "ColumnDefinition<T>"
            }
          ],
          "raw": "$ReadOnlyArray<ColumnDefinition<T>>"
        }
      },
      {
        "name": "getUniqueRowId",
        "required": true,
        "description": "A function to uniquely identify each row, this ID is what is returned in the row selections set",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "T => string",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "T"}}],
            "return": {"name": "string"}
          }
        }
      },
      {
        "name": "rowSelectionEnabled",
        "required": false,
        "description": "Whether or not checkboxes for row selection will be shown",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "rowSelectionPinned",
        "required": false,
        "description": "Whether or not the checkboxes for row selection will be pinned to the left of the table",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "onSelectedRowsChange",
        "required": false,
        "description": "Callback for when the user changes the selected rows",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "($ReadOnlySet<string>) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "Set",
                  "elements": [{"name": "string"}],
                  "raw": "$ReadOnlySet<string>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        },
        "defaultValue": "() => {}"
      },
      {
        "name": "selectedRows",
        "required": false,
        "description": "Which rows are selected, based on IDs returned from getUniqueRowId",
        "type": {
          "name": "Set",
          "elements": [{"name": "string"}],
          "raw": "$ReadOnlySet<string>"
        },
        "defaultValue": "new Set()"
      },
      {
        "name": "rowHeight",
        "required": false,
        "description": "Controls the height of each row in the table",
        "type": {"name": "number"},
        "defaultValue": "44"
      },
      {
        "name": "pinnedColumns",
        "required": false,
        "description": "Which columns are pinned to either the left or right side of the table (other columns will scroll underneath)",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n  +columnId: string,\n  +align: \"left\" | \"right\",\n|}",
              "signature": {
                "properties": [
                  {
                    "key": "columnId",
                    "value": {"name": "string", "required": true}
                  },
                  {
                    "key": "align",
                    "value": {
                      "name": "union",
                      "raw": "\"left\" | \"right\"",
                      "elements": [
                        {"name": "literal", "value": "\"left\""},
                        {"name": "literal", "value": "\"right\""}
                      ],
                      "required": true
                    }
                  }
                ]
              }
            }
          ],
          "raw": "$ReadOnlyArray<Pin>"
        },
        "defaultValue": "[]"
      },
      {
        "name": "onPinnedColumnsChange",
        "required": false,
        "description": "Callback for when the user changes pinned columns",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "($ReadOnlyArray<Pin>) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "$ReadOnlyArray",
                  "elements": [
                    {
                      "name": "signature",
                      "type": "object",
                      "raw": "{|\n  +columnId: string,\n  +align: \"left\" | \"right\",\n|}",
                      "signature": {
                        "properties": [
                          {
                            "key": "columnId",
                            "value": {"name": "string", "required": true}
                          },
                          {
                            "key": "align",
                            "value": {
                              "name": "union",
                              "raw": "\"left\" | \"right\"",
                              "elements": [
                                {"name": "literal", "value": "\"left\""},
                                {"name": "literal", "value": "\"right\""}
                              ],
                              "required": true
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "raw": "$ReadOnlyArray<Pin>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "columnCustomizationEnabled",
        "required": false,
        "description": "Whether or not to show the + for changing column visibility",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "hiddenColumns",
        "required": false,
        "description": "Which columns are hidden",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n  +columnId: string,\n|}",
              "signature": {
                "properties": [
                  {
                    "key": "columnId",
                    "value": {"name": "string", "required": true}
                  }
                ]
              }
            }
          ],
          "raw": "$ReadOnlyArray<Hide>"
        },
        "defaultValue": "[]"
      },
      {
        "name": "onHiddenColumnsChange",
        "required": false,
        "description": "Callback for when the user changes which columns are hidden",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "($ReadOnlyArray<Hide>) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "$ReadOnlyArray",
                  "elements": [
                    {
                      "name": "signature",
                      "type": "object",
                      "raw": "{|\n  +columnId: string,\n|}",
                      "signature": {
                        "properties": [
                          {
                            "key": "columnId",
                            "value": {"name": "string", "required": true}
                          }
                        ]
                      }
                    }
                  ],
                  "raw": "$ReadOnlyArray<Hide>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        },
        "defaultValue": "() => {}"
      },
      {
        "name": "sortBy",
        "required": false,
        "description": "Which column to sort by, and what direction to sort",
        "type": {
          "name": "signature",
          "type": "object",
          "raw": "{|\n  +columnId: string,\n  +direction: \"asc\" | \"desc\",\n|}",
          "signature": {
            "properties": [
              {
                "key": "columnId",
                "value": {"name": "string", "required": true}
              },
              {
                "key": "direction",
                "value": {
                  "name": "union",
                  "raw": "\"asc\" | \"desc\"",
                  "elements": [
                    {"name": "literal", "value": "\"asc\""},
                    {"name": "literal", "value": "\"desc\""}
                  ],
                  "required": true
                }
              }
            ]
          },
          "nullable": true
        }
      },
      {
        "name": "onSortByChange",
        "required": false,
        "description": "Callback for when the user changes which column and direction to sort",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "(?Sort) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{|\n  +columnId: string,\n  +direction: \"asc\" | \"desc\",\n|}",
                  "signature": {
                    "properties": [
                      {
                        "key": "columnId",
                        "value": {"name": "string", "required": true}
                      },
                      {
                        "key": "direction",
                        "value": {
                          "name": "union",
                          "raw": "\"asc\" | \"desc\"",
                          "elements": [
                            {"name": "literal", "value": "\"asc\""},
                            {"name": "literal", "value": "\"desc\""}
                          ],
                          "required": true
                        }
                      }
                    ]
                  },
                  "nullable": true
                }
              }
            ],
            "return": {"name": "void"}
          }
        },
        "defaultValue": "() => {}"
      },
      {
        "name": "rowAggregationEnabled",
        "required": false,
        "description": "Whether or not rows will be grouped and an aggregation row is present",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "rowAggregationPinned",
        "required": false,
        "description": "Whether or not the arrows for row aggregation will be pinned to the left of the table",
        "type": {"name": "boolean"},
        "defaultValue": "true"
      },
      {
        "name": "getRowGroupId",
        "required": false,
        "description": "A function to determine which row group the row belongs to, this ID is what is returned in the row expansions set",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "T => string",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "T"}}],
            "return": {"name": "string"}
          }
        }
      },
      {
        "name": "expandedRows",
        "required": false,
        "description": "Which row groups are expanded, based on IDs returned from getRowGroupId",
        "type": {
          "name": "Set",
          "elements": [{"name": "string"}],
          "raw": "$ReadOnlySet<string>"
        },
        "defaultValue": "new Set()"
      },
      {
        "name": "onExpandedRowsChange",
        "required": false,
        "description": "Callback for when the user expands a row group",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "($ReadOnlySet<string>) => void",
          "signature": {
            "arguments": [
              {
                "name": "",
                "type": {
                  "name": "Set",
                  "elements": [{"name": "string"}],
                  "raw": "$ReadOnlySet<string>"
                }
              }
            ],
            "return": {"name": "void"}
          }
        },
        "defaultValue": "() => {}"
      },
      {
        "name": "hasNextPage",
        "required": false,
        "description": "Whether additional data can be loaded from the server. Used for scrolling pagination",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "isNextPageLoading",
        "required": false,
        "description": "Whether additional data is currently being loaded. Used for scrolling pagination",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "loadNextPage",
        "required": false,
        "description": "Callback to load additional data when a user nears the end of the existing list of data. Used for scrolling pagination",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => mixed",
          "signature": {"arguments": [], "return": {"name": "mixed"}}
        },
        "defaultValue": "() => {}"
      },
      {
        "name": "rowClickingEnabled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "clickedRow",
        "required": false,
        "description": "",
        "type": {"name": "string", "nullable": true}
      },
      {
        "name": "onRowClick",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "string => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "string"}}],
            "return": {"name": "void"}
          }
        },
        "defaultValue": "() => {}"
      },
      {
        "name": "rowGroupClickingEnabled",
        "required": false,
        "description": "",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      },
      {
        "name": "clickedRowGroup",
        "required": false,
        "description": "",
        "type": {"name": "string", "nullable": true}
      },
      {
        "name": "onRowGroupClick",
        "required": false,
        "description": "",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "string => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "string"}}],
            "return": {"name": "void"}
          }
        },
        "defaultValue": "() => {}"
      },
      {
        "name": "isLoading",
        "required": false,
        "description": "Initial results are loading",
        "type": {"name": "boolean"},
        "defaultValue": "false"
      }
    ]
  },
  "TabHeader": {
    "brandStatus": "V2",
    "category": "Navigation",
    "description": "The component provides uniform designs for building Tab Headers so that they look the same across the app.",
    "name": "TabHeader",
    "shortDescription": "Use this to build tabs",
    "status": "In Review",
    "componentPath": "tabs/TabHeader",
    "repoFilePath": "webpack/assets/javascripts/latitude/tabs/TabHeader.jsx",
    "props": [
      {
        "name": "tabs",
        "required": true,
        "description": "array of tabs of type {name: string, id: string}",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n  +name: string,\n  +id: string,\n|}",
              "signature": {
                "properties": [
                  {
                    "key": "name",
                    "value": {"name": "string", "required": true}
                  },
                  {"key": "id", "value": {"name": "string", "required": true}}
                ]
              }
            }
          ],
          "raw": "$ReadOnlyArray<Tab>"
        }
      },
      {
        "name": "activeTab",
        "required": true,
        "description": "activeTab is the id of the currently active tab",
        "type": {"name": "string"}
      },
      {
        "name": "onTabChange",
        "required": true,
        "description": "onTabChange is called with the ID when the user navigates to a tab",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "string => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "string"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "actionButton",
        "required": false,
        "description": "a button displayed on the right side, optional",
        "type": {
          "name": "ReactElement",
          "raw": "React.Element<ButtonTypes>",
          "elements": [
            {
              "name": "union",
              "raw": "Button | IconButton | AnchorButton",
              "elements": [
                {"name": "Button"},
                {"name": "IconButton"},
                {"name": "AnchorButton"}
              ]
            }
          ]
        }
      },
      {
        "name": "centerTabs",
        "required": false,
        "description": "whether the tabs will be centered or not",
        "type": {"name": "boolean"}
      }
    ]
  },
  "Tabs": {
    "brandStatus": "V2",
    "category": "Navigation",
    "description": "The wrapper component should maintain the currentTab and pass it as a prop to this component. This component does not manage the state. This is an uncontrolled component i.e. you cannot change the tablist after it has been rendered. If you need to do that, please set a key on `Tabs` and change it when your tab-list changes. It is recommended to set a minHeight greater than all your tabs in the wrapper component to prevent a jarring grow.",
    "name": "Tabs",
    "shortDescription": "Tab navigation component that loads code asynchronously",
    "status": "In Review",
    "componentPath": "tabs/Tabs",
    "repoFilePath": "webpack/assets/javascripts/latitude/tabs/Tabs.jsx",
    "props": [
      {
        "name": "currentTab",
        "required": true,
        "description": "the component mounting Tab",
        "type": {"name": "string"}
      },
      {
        "name": "onTabChange",
        "required": true,
        "description": "onTabChange is called with the ID when the user navigates to a tab",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "string => void",
          "signature": {
            "arguments": [{"name": "", "type": {"name": "string"}}],
            "return": {"name": "void"}
          }
        }
      },
      {
        "name": "actionButton",
        "required": false,
        "description": "a button displayed on the right side, optional",
        "type": {"name": "AllowedButton"}
      },
      {
        "name": "children",
        "required": true,
        "description": "children are <Tab /> components only. See TabProps for the Props required by <Tab />",
        "type": {
          "name": "ReactChildrenArray",
          "raw": "React.ChildrenArray<React.Element<typeof Tab>>",
          "elements": [
            {
              "name": "ReactElement",
              "raw": "React.Element<typeof Tab>",
              "elements": [{"name": "Tab"}]
            }
          ]
        }
      }
    ]
  },
  "TakeoverLoader": {
    "brandStatus": "V2",
    "category": "Overlay",
    "description": "Takeovers are a pattern that are discouraged. They came into existence because of the difficulty in creating new routes and new pages; it seemed easier to use JavaScript to create \"new pages\" in takeovers. \n\n The reasons against using takeovers are: \n\n * You should just make a page for that, most likely. * Historically, they have been bad for code splitting. All takeover code is loaded with the page that generates the takeover. \n\n \n\n This TakeoverLoader component aims to alleviate the second of those problems. \n\n 1. Simply make a component that returns a React.Fragment, where within the fragment you've instatiated Takeover.Header and Takeover.Body. \n\n 2. Dynamically import that Takeover component, like: `const TakeoverComponent = import(<path here>)`. \n\n 3. Instantiate `TakeoverComponent` as a child of `TakeoverLoader`.",
    "name": "TakeoverLoader",
    "shortDescription": "A loader that facilitates code splitting for Takeover components. Use of Takeover without a loader is discouraged.",
    "status": "In Review",
    "componentPath": "takeover/TakeoverLoader",
    "repoFilePath": "webpack/assets/javascripts/latitude/takeover/TakeoverLoader.jsx",
    "props": [
      {
        "name": "children",
        "required": true,
        "description": "There should be one child, which is a lazy loaded component that returns <React.Fragment><Takeover.Header>...<Takeover.Body>...</React.Fragment>",
        "type": {
          "name": "ReactElement",
          "raw": "React.Element<K>",
          "elements": [{"name": "K"}]
        }
      },
      {
        "name": "onClose",
        "required": true,
        "description": "If lazy loading the takeover fails, or the user cancels before it is downloaded, onClose gets called.",
        "type": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {"arguments": [], "return": {"name": "void"}}
        }
      },
      {
        "name": "title",
        "required": true,
        "description": "While your takeover code is loading, you need to decide what to\n  display in the header. If the takeover has constant text,\n  just repeat it here. If it is dynamic, you might want to put something\n  like \"Loading...\".\n  This text only appears while we are waiting for the lazy loaded\n  takeover JavaScript to be executed.",
        "type": {"name": "string"}
      }
    ]
  },
  "Toast": {
    "brandStatus": "V2",
    "category": "Feedback",
    "description": "Toasts actually *ARE NOT* implemented with `Toast.jsx`. See [Toaster docs](/design/components/Toaster) for implementation documentation.",
    "name": "Toast",
    "shortDescription": "A quick message that should provide some additional information that relates to a user action. Toasts shouldn't interrupt the user or require input to dismiss.",
    "status": "Stable",
    "componentPath": "toast/Toast",
    "repoFilePath": "webpack/assets/javascripts/latitude/toast/Toast.jsx",
    "props": [
      {
        "name": "message",
        "required": true,
        "description": "The message to be shown in the Toast body.",
        "type": {"name": "string"}
      },
      {
        "name": "intent",
        "required": false,
        "description": "Intents are styles that convey meaning and reinforce the action.",
        "type": {
          "name": "union",
          "raw": "\"none\" | \"success\" | \"danger\"",
          "elements": [
            {"name": "literal", "value": "\"none\""},
            {"name": "literal", "value": "\"success\""},
            {"name": "literal", "value": "\"danger\""}
          ]
        },
        "defaultValue": "\"none\""
      },
      {
        "name": "action",
        "required": false,
        "description": "",
        "type": {
          "name": "union",
          "raw": "| {|\n    +type: \"undo\",\n    +onClick: () => void,\n  |}\n| {|\n    +type: \"refresh\",\n    +onClick: () => void,\n  |}\n| {|\n    +type: \"none\",\n  |}",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n    +type: \"undo\",\n    +onClick: () => void,\n  |}",
              "signature": {
                "properties": [
                  {
                    "key": "type",
                    "value": {
                      "name": "literal",
                      "value": "\"undo\"",
                      "required": true
                    }
                  },
                  {
                    "key": "onClick",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {"name": "void"}
                      },
                      "required": true
                    }
                  }
                ]
              }
            },
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n    +type: \"refresh\",\n    +onClick: () => void,\n  |}",
              "signature": {
                "properties": [
                  {
                    "key": "type",
                    "value": {
                      "name": "literal",
                      "value": "\"refresh\"",
                      "required": true
                    }
                  },
                  {
                    "key": "onClick",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {"name": "void"}
                      },
                      "required": true
                    }
                  }
                ]
              }
            },
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n    +type: \"none\",\n  |}",
              "signature": {
                "properties": [
                  {
                    "key": "type",
                    "value": {
                      "name": "literal",
                      "value": "\"none\"",
                      "required": true
                    }
                  }
                ]
              }
            }
          ]
        },
        "defaultValue": "{type: \"none\"}"
      }
    ]
  },
  "Toaster": {
    "brandStatus": "V2",
    "category": "Feedback",
    "description": "Toaster is an invisible full page overlay which manages and displays incoming and outgoing toasts. Head over to [Toast Documention](/design/components/Toast) for examples, UI anatomy, and toast options. \n\n **Adding toasts:** \n\n 1. Ensure ConnectedToaster is rendered in your app (`import ConnectedToaster from \"toast/ConnectedToaster\";`) \n\n 2. Use ToastActions to emit a toast: `ToastActions.show({message, intent});` \n\n \n\n **How it works** \n\n Toasts will automatically stack and disappear according to the default settings. To display a toast, use: `ToastActions.show({message, intent});`. You can optionally specify a timeout duration by passing a second argument to `show()`. (The default duration is `3000ms`.)",
    "name": "Toaster",
    "shortDescription": "The manager that controls Toast animation and display",
    "status": "Stable",
    "componentPath": "toast/Toaster",
    "repoFilePath": "webpack/assets/javascripts/latitude/toast/Toaster.jsx",
    "props": [
      {
        "name": "topOffset",
        "required": false,
        "description": "",
        "type": {"name": "number"}
      },
      {
        "name": "toasts",
        "required": true,
        "description": "",
        "type": {
          "name": "Array",
          "elements": [{"name": "ToastRecord"}],
          "raw": "Array<ToastRecord>"
        }
      }
    ]
  },
  "WorkspacesNav": {
    "brandStatus": "V2",
    "category": "Application",
    "description": "In the future, will have options for search bars. For now, this component supports links for primary app pages, user profile, and an icon for the current application.",
    "name": "WorkspacesNav",
    "shortDescription": "The navigation bar for Flexport applications. See top of page for example.",
    "status": "In Review",
    "componentPath": "workspaces/WorkspacesNav",
    "repoFilePath": "webpack/assets/javascripts/latitude/workspaces/WorkspacesNav.jsx",
    "props": [
      {
        "name": "navLinks",
        "required": true,
        "description": "an array of routes, used for the application chooser",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{|\n  +text: string,\n  +route: string,\n  +isActive: boolean,\n|}",
              "signature": {
                "properties": [
                  {
                    "key": "text",
                    "value": {"name": "string", "required": true}
                  },
                  {
                    "key": "route",
                    "value": {"name": "string", "required": true}
                  },
                  {
                    "key": "isActive",
                    "value": {"name": "boolean", "required": true}
                  }
                ]
              }
            }
          ],
          "raw": "$ReadOnlyArray<NavLinkType>"
        }
      },
      {
        "name": "appIcon",
        "required": true,
        "description": "the name of the icon for the current application",
        "type": {"name": "IconNames"}
      },
      {
        "name": "homeRoute",
        "required": true,
        "description": "the URL that the home icon for the current app should route to, should be the root of the app",
        "type": {"name": "string"}
      },
      {
        "name": "currentPath",
        "required": true,
        "description": "The current pathname",
        "type": {"name": "string"}
      },
      {
        "name": "appAccessibility",
        "required": true,
        "description": "The other apps that users are able to navigate to",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "App"}],
          "raw": "$ReadOnlyArray<App>"
        }
      },
      {
        "name": "components",
        "required": false,
        "description": "The other components to render in the nav bar",
        "type": {
          "name": "$ReadOnlyArray",
          "elements": [{"name": "ReactNode", "raw": "React.Node"}],
          "raw": "$ReadOnlyArray<React.Node>"
        }
      }
    ]
  }
}
